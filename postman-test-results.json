{
  "collection": {
    "_": {
      "postman_id": "todo-api-crud-collection-2025",
      "exporter_id": "todo-api-testing"
    },
    "item": [
      {
        "id": "05234ea4-2faa-4510-83d2-2b389b1db266",
        "name": "🏥 Health & Setup",
        "item": [
          {
            "id": "1885d426-9b7f-4d96-8b20-16614223f739",
            "name": "🩺 API Health Check",
            "request": {
              "description": {
                "content": "Verify that the API server is running and healthy before starting tests",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "health"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "359e7c6b-1dbc-4365-bfcc-7c3486040568",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API Health Check - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('API Health Check - Response has success field', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "});",
                    "",
                    "pm.test('API Health Check - Response has message', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('message');",
                    "});",
                    "",
                    "pm.test('API Health Check - Response time is reasonable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "console.log('✅ API Health Check completed successfully');",
                    "console.log('📊 Response time:', pm.response.responseTime, 'ms');"
                  ],
                  "_lastExecutionId": "b705b6bf-7724-45cc-b547-abadeb82f7d8"
                }
              }
            ]
          },
          {
            "id": "3245f151-bad0-491b-9564-296c4acac5cc",
            "name": "🌐 Root Endpoint Info",
            "request": {
              "description": {
                "content": "Get API information and available endpoints",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d989185c-f11a-4236-b4d5-27a7a6f3e53c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Root Endpoint - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Root Endpoint - Has API information', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('message');",
                    "    pm.expect(responseJson).to.have.property('endpoints');",
                    "});",
                    "",
                    "console.log('✅ Root endpoint verification completed');"
                  ],
                  "_lastExecutionId": "a6826da7-3fbf-42a2-a8cc-f48d12a55ce0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57f19ec3-ba5b-4917-bf05-b03b6b1c4ed0",
        "name": "📊 Statistics (Before Tests)",
        "item": [
          {
            "id": "e6c70f51-ed17-4976-91d9-d33b54362c5a",
            "name": "📈 Get Initial Todo Statistics",
            "request": {
              "description": {
                "content": "Get initial todo statistics before running tests",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "stats"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e7e95c4e-5fc0-4838-ac7b-4450afa733d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Initial Stats - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Initial Stats - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson).to.have.property('data');",
                    "    pm.expect(responseJson.data).to.have.property('total');",
                    "    pm.expect(responseJson.data).to.have.property('completed');",
                    "    pm.expect(responseJson.data).to.have.property('pending');",
                    "});",
                    "",
                    "// Store initial stats for comparison",
                    "const stats = pm.response.json().data;",
                    "pm.environment.set('initialTotalTodos', stats.total);",
                    "pm.environment.set('initialCompletedTodos', stats.completed);",
                    "pm.environment.set('initialPendingTodos', stats.pending);",
                    "",
                    "console.log('📊 Initial Statistics:');",
                    "console.log('   Total todos:', stats.total);",
                    "console.log('   Completed:', stats.completed);",
                    "console.log('   Pending:', stats.pending);",
                    "console.log('✅ Initial statistics recorded');"
                  ],
                  "_lastExecutionId": "0800c333-2d7b-4317-8308-3c8f27c54ac4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "28698c3b-5fd7-460f-9341-058e22ec7846",
        "name": "📚 READ Operations",
        "item": [
          {
            "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
            "name": "📋 Get All Todos (Initial)",
            "request": {
              "description": {
                "content": "Retrieve all existing todos to establish baseline",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b59a2ae-fed3-4569-9a91-66d9463928b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get All Todos - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Get All Todos - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson).to.have.property('data');",
                    "    pm.expect(responseJson).to.have.property('count');",
                    "    pm.expect(responseJson.data).to.be.an('array');",
                    "});",
                    "",
                    "// Store existing todos count for verification",
                    "const response = pm.response.json();",
                    "pm.environment.set('existingTodosCount', response.count);",
                    "",
                    "console.log('📋 Found', response.count, 'existing todos');",
                    "",
                    "// If there are existing todos, store the first one's ID for single todo test",
                    "if (response.data.length > 0) {",
                    "    pm.environment.set('existingTodoId', response.data[0]._id);",
                    "    console.log('💾 Stored existing todo ID for single todo test:', response.data[0]._id);",
                    "}",
                    "",
                    "console.log('✅ Get all todos completed successfully');"
                  ],
                  "_lastExecutionId": "2b47e8cd-fe4d-4ed7-9d83-5363a2ca8982"
                }
              }
            ]
          },
          {
            "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
            "name": "🔍 Get Single Todo (If Exists)",
            "request": {
              "description": {
                "content": "Get a single todo by ID (only if existing todos are present)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{existingTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81b0c51e-7880-4014-a5d5-573acf7de5de",
                  "type": "text/javascript",
                  "exec": [
                    "// Skip this test if no existing todos",
                    "if (!pm.environment.get('existingTodoId')) {",
                    "    console.log('⏭️ Skipping single todo test - no existing todos found');",
                    "    pm.execution.skipRequest();",
                    "}"
                  ],
                  "_lastExecutionId": "885a9746-a886-48a8-82e3-0ecfd991f346"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e27e7405-8989-4c2e-b24a-3fed65a45e35",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get Single Todo - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Get Single Todo - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson).to.have.property('data');",
                    "    pm.expect(responseJson.data).to.have.property('_id');",
                    "    pm.expect(responseJson.data).to.have.property('title');",
                    "});",
                    "",
                    "console.log('✅ Single todo retrieval completed successfully');"
                  ],
                  "_lastExecutionId": "74659b53-8c6d-49cb-80e5-c78b75a0c93e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
        "name": "➕ CREATE Operations",
        "item": [
          {
            "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
            "name": "🚀 Create High Priority Todo",
            "request": {
              "description": {
                "content": "Create a high priority todo item for testing",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson).to.have.property('data');",
                    "    pm.expect(responseJson.data).to.have.property('_id');",
                    "    pm.expect(responseJson.data).to.have.property('title');",
                    "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                    "    pm.expect(responseJson.data).to.have.property('completed', false);",
                    "});",
                    "",
                    "// Store the created todo ID for later operations",
                    "const createdTodo = pm.response.json().data;",
                    "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                    "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                    "",
                    "console.log('✅ High priority todo created successfully');",
                    "console.log('💾 Stored todo ID:', createdTodo._id);",
                    "console.log('📋 Title:', createdTodo.title);"
                  ],
                  "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                }
              }
            ]
          },
          {
            "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
            "name": "📝 Create Medium Priority Todo",
            "request": {
              "description": {
                "content": "Create a medium priority todo item",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                    "});",
                    "",
                    "// Store the created todo ID",
                    "const createdTodo = pm.response.json().data;",
                    "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                    "",
                    "// Update created todos list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "createdTodos.push(createdTodo._id);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('✅ Medium priority todo created successfully');",
                    "console.log('💾 Stored todo ID:', createdTodo._id);"
                  ],
                  "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                }
              }
            ]
          },
          {
            "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
            "name": "📚 Create Low Priority Todo",
            "request": {
              "description": {
                "content": "Create a low priority todo item",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                    "});",
                    "",
                    "// Store the created todo ID",
                    "const createdTodo = pm.response.json().data;",
                    "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                    "",
                    "// Update created todos list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "createdTodos.push(createdTodo._id);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('✅ Low priority todo created successfully');",
                    "console.log('💾 Stored todo ID:', createdTodo._id);"
                  ],
                  "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                }
              }
            ]
          },
          {
            "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
            "name": "✅ Create Completed Todo",
            "request": {
              "description": {
                "content": "Create a todo that is already marked as completed",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Create Completed Todo - Status Code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Create Completed Todo - Response structure is correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('completed', true);",
                    "});",
                    "",
                    "// Store the created todo ID",
                    "const createdTodo = pm.response.json().data;",
                    "pm.environment.set('completedTodoId', createdTodo._id);",
                    "",
                    "// Update created todos list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "createdTodos.push(createdTodo._id);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('✅ Completed todo created successfully');",
                    "console.log('💾 Stored todo ID:', createdTodo._id);"
                  ],
                  "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                }
              }
            ]
          },
          {
            "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
            "name": "🔤 Create Todo with Special Characters",
            "request": {
              "description": {
                "content": "Create a todo with special characters and Unicode to test character encoding",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                    "});",
                    "",
                    "// Store the created todo ID",
                    "const createdTodo = pm.response.json().data;",
                    "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                    "",
                    "// Update created todos list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "createdTodos.push(createdTodo._id);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('✅ Special characters todo created successfully');",
                    "console.log('💾 Stored todo ID:', createdTodo._id);"
                  ],
                  "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
        "name": "📚 READ Operations (After Creation)",
        "item": [
          {
            "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
            "name": "📋 Get All Todos (After Creation)",
            "request": {
              "description": {
                "content": "Verify that all created todos are now present in the system",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                    "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "    ",
                    "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                    "});",
                    "",
                    "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "    ",
                    "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                    "    ",
                    "    createdTodos.forEach(todoId => {",
                    "        pm.expect(returnedTodoIds).to.include(todoId);",
                    "    });",
                    "});",
                    "",
                    "console.log('✅ All todos retrieved successfully after creation');",
                    "console.log('📊 Total todos now:', pm.response.json().count);"
                  ],
                  "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                }
              }
            ]
          },
          {
            "id": "09424bfb-91b1-490b-b845-73c0d732667c",
            "name": "🔍 Get Single Created Todo",
            "request": {
              "description": {
                "content": "Get a specific todo that was created in the previous step",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{highPriorityTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const expectedId = pm.environment.get('highPriorityTodoId');",
                    "    ",
                    "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                    "    pm.expect(responseJson.data.priority).to.equal('high');",
                    "    pm.expect(responseJson.data.title).to.include('Urgent');",
                    "});",
                    "",
                    "console.log('✅ Single todo retrieved successfully');"
                  ],
                  "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                }
              }
            ]
          },
          {
            "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
            "name": "🔍 Filter Todos by Priority (High)",
            "request": {
              "description": {
                "content": "Filter todos to only show high priority items",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "priority",
                    "value": "high"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    ",
                    "    responseJson.data.forEach(todo => {",
                    "        pm.expect(todo.priority).to.equal('high');",
                    "    });",
                    "});",
                    "",
                    "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                    "    ",
                    "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                    "    pm.expect(foundTodo).to.not.be.undefined;",
                    "});",
                    "",
                    "console.log('✅ High priority filter working correctly');",
                    "console.log('📊 High priority todos found:', pm.response.json().count);"
                  ],
                  "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                }
              }
            ]
          },
          {
            "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
            "name": "✅ Filter Completed Todos",
            "request": {
              "description": {
                "content": "Filter todos to only show completed items",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "completed",
                    "value": "true"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Filter Completed Todos - Only completed returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    ",
                    "    responseJson.data.forEach(todo => {",
                    "        pm.expect(todo.completed).to.equal(true);",
                    "    });",
                    "});",
                    "",
                    "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const completedId = pm.environment.get('completedTodoId');",
                    "    ",
                    "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                    "    pm.expect(foundTodo).to.not.be.undefined;",
                    "});",
                    "",
                    "console.log('✅ Completed filter working correctly');",
                    "console.log('📊 Completed todos found:', pm.response.json().count);"
                  ],
                  "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                }
              }
            ]
          },
          {
            "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
            "name": "📅 Sort Todos by Creation Date",
            "request": {
              "description": {
                "content": "Get todos sorted by creation date (newest first)",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "sort",
                    "value": "-createdAt"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Sort Todos - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Sort Todos - Sorted by creation date', function () {",
                    "    const responseJson = pm.response.json();",
                    "    ",
                    "    if (responseJson.data.length > 1) {",
                    "        for (let i = 1; i < responseJson.data.length; i++) {",
                    "            const currentDate = new Date(responseJson.data[i].createdAt);",
                    "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                    "            pm.expect(currentDate).to.be.at.most(previousDate);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "console.log('✅ Sorting by creation date working correctly');"
                  ],
                  "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "01da8ef3-4a93-4352-9717-3f783d0f891a",
        "name": "✏️ UPDATE Operations",
        "item": [
          {
            "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
            "name": "📝 Update Todo Title and Description",
            "request": {
              "description": {
                "content": "Update the title and description of an existing todo",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{mediumPriorityTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                    "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                    "});",
                    "",
                    "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                    "    // updatedAt should be different from createdAt",
                    "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                    "});",
                    "",
                    "console.log('✅ Todo title and description updated successfully');"
                  ],
                  "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
                }
              }
            ]
          },
          {
            "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
            "name": "✅ Mark Todo as Completed",
            "request": {
              "description": {
                "content": "Mark a todo as completed by updating the completed field",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{lowPriorityTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"completed\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Mark Todo Completed - Completion status updated', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('completed', true);",
                    "});",
                    "",
                    "console.log('✅ Todo marked as completed successfully');"
                  ],
                  "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
                }
              }
            ]
          },
          {
            "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
            "name": "🔄 Change Todo Priority",
            "request": {
              "description": {
                "content": "Change the priority level of an existing todo",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{highPriorityTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"priority\": \"medium\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Change Todo Priority - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                    "});",
                    "",
                    "console.log('✅ Todo priority changed successfully');"
                  ],
                  "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
                }
              }
            ]
          },
          {
            "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
            "name": "🔄 Update Multiple Fields",
            "request": {
              "description": {
                "content": "Update multiple fields of a todo in a single request",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{specialCharsTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Update Multiple Fields - All fields updated', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                    "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                    "    pm.expect(responseJson.data).to.have.property('completed', false);",
                    "});",
                    "",
                    "console.log('✅ Multiple fields updated successfully');"
                  ],
                  "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "da9cdc02-306e-4336-96be-7725e1eda6a4",
        "name": "📊 Statistics (After Updates)",
        "item": [
          {
            "id": "29dd756e-e93b-4361-88ec-b35e63380c81",
            "name": "📈 Get Updated Todo Statistics",
            "request": {
              "description": {
                "content": "Get updated statistics after all CRUD operations",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "stats"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "133480fb-63ef-47b9-9b2d-89eb5dba8e99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Updated Stats - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated Stats - Statistics reflect changes', function () {",
                    "    const responseJson = pm.response.json();",
                    "    const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                    "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "    ",
                    "    pm.expect(responseJson.data.total).to.equal(initialTotal + createdTodos.length);",
                    "    pm.expect(responseJson.data.completed).to.be.at.least(1); // At least one completed",
                    "    pm.expect(responseJson.data.pending).to.be.at.least(1); // At least one pending",
                    "});",
                    "",
                    "const stats = pm.response.json().data;",
                    "console.log('📊 Updated Statistics:');",
                    "console.log('   Total todos:', stats.total);",
                    "console.log('   Completed:', stats.completed);",
                    "console.log('   Pending:', stats.pending);",
                    "console.log('✅ Statistics updated correctly after CRUD operations');"
                  ],
                  "_lastExecutionId": "16ae93cd-1f46-472d-970f-fe8df70e95a1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7fc0b135-a5b9-44ec-a1d0-cf162453082f",
        "name": "🗑️ DELETE Operations",
        "item": [
          {
            "id": "f0eeb758-f265-4193-b958-96db8ded6027",
            "name": "🗑️ Delete Single Todo",
            "request": {
              "description": {
                "content": "Delete a specific todo by ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{specialCharsTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6bff527f-6014-4968-aa8d-3badd9c99beb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Delete Todo - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Delete Todo - Success message returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', true);",
                    "    pm.expect(responseJson).to.have.property('message');",
                    "});",
                    "",
                    "// Remove from created todos list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "const deletedId = pm.environment.get('specialCharsTodoId');",
                    "createdTodos = createdTodos.filter(id => id !== deletedId);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('✅ Todo deleted successfully');",
                    "console.log('🗑️ Deleted todo ID:', deletedId);"
                  ],
                  "_lastExecutionId": "8bbf863c-aafe-48ed-9cca-f3e8bbd86bee"
                }
              }
            ]
          },
          {
            "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
            "name": "🔍 Verify Todo Deletion",
            "request": {
              "description": {
                "content": "Try to get the deleted todo to verify it no longer exists",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{specialCharsTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "973639be-8841-40ea-9f68-6f431bdcb378",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Verify Deletion - Status Code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Verify Deletion - Error message for not found', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', false);",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "console.log('✅ Deletion verified - todo no longer exists');"
                  ],
                  "_lastExecutionId": "e20367a9-0bab-490f-b362-bf322b2e623d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b0009e3d-4cd4-4bc2-8d74-366166088cf4",
        "name": "❌ Error Handling Tests",
        "item": [
          {
            "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
            "name": "❌ Get Non-Existent Todo",
            "request": {
              "description": {
                "content": "Test error handling when trying to get a todo that doesn't exist",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "507f1f77bcf86cd799439011"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Non-Existent Todo - Error structure correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', false);",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "console.log('✅ Error handling for non-existent todo works correctly');"
                  ],
                  "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
                }
              }
            ]
          },
          {
            "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
            "name": "❌ Create Todo with Invalid Data",
            "request": {
              "description": {
                "content": "Test validation by trying to create a todo with invalid data",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test('Invalid Todo Data - Validation error returned', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', false);",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "console.log('✅ Validation error handling works correctly');"
                  ],
                  "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
                }
              }
            ]
          },
          {
            "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
            "name": "❌ Update Non-Existent Todo",
            "request": {
              "description": {
                "content": "Test error handling when trying to update a non-existent todo",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "507f1f77bcf86cd799439012"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"title\": \"This update should fail\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Update Non-Existent - Status Code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Update Non-Existent - Error message correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', false);",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "console.log('✅ Update error handling works correctly');"
                  ],
                  "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
                }
              }
            ]
          },
          {
            "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
            "name": "❌ Delete Non-Existent Todo",
            "request": {
              "description": {
                "content": "Test error handling when trying to delete a non-existent todo",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "507f1f77bcf86cd799439013"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Delete Non-Existent - Error message correct', function () {",
                    "    const responseJson = pm.response.json();",
                    "    pm.expect(responseJson).to.have.property('success', false);",
                    "    pm.expect(responseJson).to.have.property('error');",
                    "});",
                    "",
                    "console.log('✅ Delete error handling works correctly');"
                  ],
                  "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d063a39a-6491-447d-a9c2-9a5c0d41b1ed",
        "name": "🧹 Cleanup & Final Verification",
        "item": [
          {
            "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
            "name": "📊 Final Statistics Check",
            "request": {
              "description": {
                "content": "Final verification of todo statistics after all operations",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "stats"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c423e25a-cafc-4933-a85d-b8e9a3d559ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Final Stats - Status Code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "const stats = pm.response.json().data;",
                    "const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                    "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "const expectedTotal = initialTotal + createdTodos.length;",
                    "",
                    "pm.test('Final Stats - Todo counts are correct', function () {",
                    "    pm.expect(stats.total).to.equal(expectedTotal);",
                    "});",
                    "",
                    "console.log('📊 Final Statistics:');",
                    "console.log('   Initial todos:', initialTotal);",
                    "console.log('   Created todos:', createdTodos.length);",
                    "console.log('   Deleted todos:', 1);",
                    "console.log('   Expected total:', expectedTotal);",
                    "console.log('   Actual total:', stats.total);",
                    "console.log('   Completed:', stats.completed);",
                    "console.log('   Pending:', stats.pending);",
                    "console.log('✅ Final statistics verification completed');"
                  ],
                  "_lastExecutionId": "d0d68586-7243-4248-b80a-c4f73191f9f2"
                }
              }
            ]
          },
          {
            "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
            "name": "🗑️ Cleanup Created Test Todos",
            "request": {
              "description": {
                "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "todos",
                  "{{currentCleanupTodoId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "463117e1-54d5-42e8-a1e9-872335c6425f",
                  "type": "text/javascript",
                  "exec": [
                    "// Get remaining created todos to clean up",
                    "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "",
                    "if (createdTodos.length === 0) {",
                    "    console.log('⏭️ No todos to clean up');",
                    "    pm.execution.skipRequest();",
                    "} else {",
                    "    // Set the first todo ID for deletion",
                    "    pm.environment.set('currentCleanupTodoId', createdTodos[0]);",
                    "    console.log('🧹 Cleaning up todo:', createdTodos[0]);",
                    "}"
                  ],
                  "_lastExecutionId": "b9906031-c63a-4b26-9631-4f494811da8d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d4e7544-126e-4a77-afcd-3ca6295bb332",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cleanup Todo - Deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Remove the deleted todo from the list",
                    "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                    "const deletedId = pm.environment.get('currentCleanupTodoId');",
                    "createdTodos = createdTodos.filter(id => id !== deletedId);",
                    "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                    "",
                    "console.log('🗑️ Cleaned up todo:', deletedId);",
                    "console.log('📋 Remaining todos to clean:', createdTodos.length);",
                    "",
                    "// If there are more todos to clean up, set up for next iteration",
                    "if (createdTodos.length > 0) {",
                    "    console.log('🔄 More cleanup needed. Run this request again or continue with remaining todos.');",
                    "} else {",
                    "    console.log('✅ All test todos cleaned up successfully!');",
                    "}"
                  ],
                  "_lastExecutionId": "857364f7-b4c5-4189-90e1-6ed8cd5cacd4"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "c55e9837-2f48-4139-a61e-f1aa1a08da64",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('🚀 Starting request:', pm.info.requestName);",
            "console.log('📍 URL:', pm.request.url.toString());"
          ],
          "_lastExecutionId": "c2e3eb55-f848-4881-948b-fd7153145ce4"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "60a80c08-d481-4630-8fbb-70f71a2f3dcb",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "const responseTime = pm.response.responseTime;",
            "const statusCode = pm.response.code;",
            "",
            "// Log response summary",
            "console.log('⏱️ Response time:', responseTime, 'ms');",
            "console.log('📊 Status code:', statusCode);",
            "",
            "// Performance test",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(responseTime).to.be.below(5000);",
            "});",
            "",
            "// Basic response structure test",
            "pm.test('Response has correct content type', function () {",
            "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
            "});"
          ],
          "_lastExecutionId": "7161e132-c026-412c-b904-6f045dc14b19"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:5000",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "todo-api-crud-collection-2025",
      "name": "🚀 Todo API - Complete CRUD Testing Collection",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive Postman collection for testing all Todo API endpoints with proper CRUD sequence and seed data. This collection is designed to be run sequentially to test Create, Read, Update, and Delete operations with realistic test scenarios.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "todo-api-environment-2025",
    "name": "🌍 Todo API - Testing Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:5000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "apiVersion"
      },
      {
        "type": "any",
        "value": "{{$timestamp}}",
        "key": "testRunId"
      },
      {
        "type": "any",
        "value": 13,
        "key": "initialTotalTodos"
      },
      {
        "type": "any",
        "value": 4,
        "key": "initialCompletedTodos"
      },
      {
        "type": "any",
        "value": 9,
        "key": "initialPendingTodos"
      },
      {
        "type": "any",
        "value": 13,
        "key": "existingTodosCount"
      },
      {
        "type": "any",
        "value": "68d1e9d7a1ab7c8c788bab9c",
        "key": "existingTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad2c",
        "key": "highPriorityTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad2e",
        "key": "mediumPriorityTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad30",
        "key": "lowPriorityTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad32",
        "key": "completedTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad34",
        "key": "specialCharsTodoId"
      },
      {
        "type": "any",
        "value": "68d1ea2ca1ab7c8c788bad2c",
        "key": "currentCleanupTodoId"
      },
      {
        "type": "any",
        "value": "[\"68d1ea2ca1ab7c8c788bad2e\",\"68d1ea2ca1ab7c8c788bad30\",\"68d1ea2ca1ab7c8c788bad32\"]",
        "key": "createdTodos"
      }
    ]
  },
  "globals": {
    "id": "b0342e44-132b-4ebf-988d-60592372f3e0",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 86,
        "pending": 0,
        "failed": 28
      },
      "prerequests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 56,
        "pending": 0,
        "failed": 28
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.3928571428571415,
      "responseMin": 3,
      "responseMax": 25,
      "responseSd": 4.474844655837513,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1758587435769,
      "completed": 1758587436990
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3647ef4b-790c-4f76-bf31-3bdb6c8c7b05",
          "httpRequestId": "6936ee4b-d4b2-45eb-98b8-7336e863482b"
        },
        "item": {
          "id": "1885d426-9b7f-4d96-8b20-16614223f739",
          "name": "🩺 API Health Check",
          "request": {
            "description": {
              "content": "Verify that the API server is running and healthy before starting tests",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "359e7c6b-1dbc-4365-bfcc-7c3486040568",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Health Check - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('API Health Check - Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('API Health Check - Response has message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('API Health Check - Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "console.log('✅ API Health Check completed successfully');",
                  "console.log('📊 Response time:', pm.response.responseTime, 'ms');"
                ],
                "_lastExecutionId": "b705b6bf-7724-45cc-b547-abadeb82f7d8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify that the API server is running and healthy before starting tests",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b494920-3a3c-4219-90db-744a5d7b3507",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9386a972-9425-4258-8d82-dd1193745d22",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "82"
            },
            {
              "key": "ETag",
              "value": "W/\"52-PF553OEbRCuFmji75xxoQ9HQH24\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              53,
              46,
              56,
              49,
              56,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 82
        },
        "id": "1885d426-9b7f-4d96-8b20-16614223f739",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "f5a08b18-e32d-47be-93cb-29668f5afcce",
              "timestamp": 1758587435840,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "API Health Check - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "API Health Check - Response has success field",
            "skipped": false
          },
          {
            "assertion": "API Health Check - Response has message",
            "skipped": false
          },
          {
            "assertion": "API Health Check - Response time is reasonable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5f4c0450-1ad9-43d7-b55d-03eb2201aa78",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "529a716c-bcc6-4d57-83ee-661037d60af6"
        },
        "item": {
          "id": "3245f151-bad0-491b-9564-296c4acac5cc",
          "name": "🌐 Root Endpoint Info",
          "request": {
            "description": {
              "content": "Get API information and available endpoints",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d989185c-f11a-4236-b4d5-27a7a6f3e53c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Root Endpoint - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Root Endpoint - Has API information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "console.log('✅ Root endpoint verification completed');"
                ],
                "_lastExecutionId": "a6826da7-3fbf-42a2-a8cc-f48d12a55ce0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get API information and available endpoints",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c6ebd0d-f845-4a63-9be0-7dd9e2c2546c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e595464b-5602-49d4-a724-58ff07a9a2af",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "109"
            },
            {
              "key": "ETag",
              "value": "W/\"6d-nlCTtQxhHKOBaW/P0RqdI+t+Bl0\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              87,
              101,
              108,
              99,
              111,
              109,
              101,
              32,
              116,
              111,
              32,
              84,
              111,
              100,
              111,
              32,
              65,
              80,
              73,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              44,
              34,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              100,
              111,
              115,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              116,
              111,
              100,
              111,
              115,
              34,
              44,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 109
        },
        "id": "3245f151-bad0-491b-9564-296c4acac5cc",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ff0025ec-932c-4121-a0d2-978a3ab71c86",
              "timestamp": 1758587435890,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Root Endpoint - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Root Endpoint - Has API information",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "be480477-305e-4215-9319-733b4244e750",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2dfa6688-0c95-4635-9fe9-81d7ece188cb"
        },
        "item": {
          "id": "e6c70f51-ed17-4976-91d9-d33b54362c5a",
          "name": "📈 Get Initial Todo Statistics",
          "request": {
            "description": {
              "content": "Get initial todo statistics before running tests",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7e95c4e-5fc0-4838-ac7b-4450afa733d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Initial Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Initial Stats - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data).to.have.property('completed');",
                  "    pm.expect(responseJson.data).to.have.property('pending');",
                  "});",
                  "",
                  "// Store initial stats for comparison",
                  "const stats = pm.response.json().data;",
                  "pm.environment.set('initialTotalTodos', stats.total);",
                  "pm.environment.set('initialCompletedTodos', stats.completed);",
                  "pm.environment.set('initialPendingTodos', stats.pending);",
                  "",
                  "console.log('📊 Initial Statistics:');",
                  "console.log('   Total todos:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Initial statistics recorded');"
                ],
                "_lastExecutionId": "0800c333-2d7b-4317-8308-3c8f27c54ac4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get initial todo statistics before running tests",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b600a58-c904-46ec-9ffa-8014731314e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7b681a60-6eac-4950-ab94-1076235f1507",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "105"
            },
            {
              "key": "ETag",
              "value": "W/\"69-cVj1/3af9ML77mvmHKiz9/+KLwY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              51,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              52,
              44,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              57,
              44,
              34,
              98,
              121,
              80,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              123,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              58,
              54,
              44,
              34,
              108,
              111,
              119,
              34,
              58,
              52,
              44,
              34,
              104,
              105,
              103,
              104,
              34,
              58,
              51,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 105
        },
        "id": "e6c70f51-ed17-4976-91d9-d33b54362c5a",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "e76de0a3-12d9-4830-a425-e0dcada1dc35",
              "timestamp": 1758587435932,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Initial Stats - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Initial Stats - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "efd550ed-c0b7-4504-805c-0a785affe3c8",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "700c48c8-0ee7-4ede-907c-bcf3f9e42b20"
        },
        "item": {
          "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
          "name": "📋 Get All Todos (Initial)",
          "request": {
            "description": {
              "content": "Retrieve all existing todos to establish baseline",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b59a2ae-fed3-4569-9a91-66d9463928b2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get All Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get All Todos - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "// Store existing todos count for verification",
                  "const response = pm.response.json();",
                  "pm.environment.set('existingTodosCount', response.count);",
                  "",
                  "console.log('📋 Found', response.count, 'existing todos');",
                  "",
                  "// If there are existing todos, store the first one's ID for single todo test",
                  "if (response.data.length > 0) {",
                  "    pm.environment.set('existingTodoId', response.data[0]._id);",
                  "    console.log('💾 Stored existing todo ID for single todo test:', response.data[0]._id);",
                  "}",
                  "",
                  "console.log('✅ Get all todos completed successfully');"
                ],
                "_lastExecutionId": "2b47e8cd-fe4d-4ed7-9d83-5363a2ca8982"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Retrieve all existing todos to establish baseline",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0d23c79d-b4c7-4c9f-a747-e615dc4cc45f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cfa21566-3750-4153-9364-a32f0ac74680",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "3347"
            },
            {
              "key": "ETag",
              "value": "W/\"d13-w+ITb5jsZEyBLaRYCjgyk+wxuDY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              51,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              54,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              55,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              82,
              85,
              68,
              32,
              84,
              101,
              115,
              116,
              32,
              84,
              111,
              100,
              111,
              32,
              49,
              55,
              53,
              56,
              53,
              56,
              55,
              51,
              53,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              119,
              97,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              99,
              114,
              105,
              112,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              53,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              82,
              69,
              65,
              68,
              77,
              69,
              32,
              97,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              97,
              108,
              105,
              116,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              97,
              99,
              114,
              111,
              115,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              116,
              105,
              116,
              108,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              79,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              32,
              105,
              110,
              100,
              101,
              120,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              111,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              102,
              111,
              114,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              67,
              73,
              47,
              67,
              68,
              32,
              112,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              101,
              100,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              117,
              110,
              105,
              116,
              32,
              116,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              111,
              118,
              101,
              114,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              32,
              97,
              110,
              100,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              98,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              105,
              110,
              112,
              117,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              98,
              111,
              116,
              104,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              45,
              115,
              105,
              100,
              101,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              45,
              115,
              105,
              100,
              101,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              32,
              102,
              111,
              114,
              109,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              68,
              101,
              115,
              105,
              103,
              110,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              105,
              118,
              101,
              32,
              85,
              73,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              109,
              111,
              100,
              101,
              114,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              108,
              105,
              115,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              101,
              97,
              99,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              55,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              101,
              97,
              114,
              110,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              110,
              101,
              119,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              116,
              117,
              100,
              121,
              32,
              99,
              111,
              110,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              44,
              32,
              83,
              117,
              115,
              112,
              101,
              110,
              115,
              101,
              44,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              99,
              32,
              98,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              44,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              57,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              82,
              69,
              83,
              84,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              115,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              69,
              120,
              112,
              114,
              101,
              115,
              115,
              46,
              106,
              115,
              32,
              97,
              110,
              100,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              78,
              111,
              100,
              101,
              46,
              106,
              115,
              44,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              44,
              32,
              97,
              110,
              100,
              32,
              68,
              111,
              99,
              107,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              49,
              50,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 3347
        },
        "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "6916560e-a7e8-4d6a-903d-7480fec776e7",
              "timestamp": 1758587435994,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Get All Todos - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Get All Todos - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41888942-e58b-4120-83fd-821003d2dbd3",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8879c636-1351-4487-b3b8-f558856f2520"
        },
        "item": {
          "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
          "name": "🔍 Get Single Todo (If Exists)",
          "request": {
            "description": {
              "content": "Get a single todo by ID (only if existing todos are present)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{existingTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "81b0c51e-7880-4014-a5d5-573acf7de5de",
                "type": "text/javascript",
                "exec": [
                  "// Skip this test if no existing todos",
                  "if (!pm.environment.get('existingTodoId')) {",
                  "    console.log('⏭️ Skipping single todo test - no existing todos found');",
                  "    pm.execution.skipRequest();",
                  "}"
                ],
                "_lastExecutionId": "885a9746-a886-48a8-82e3-0ecfd991f346"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e27e7405-8989-4c2e-b24a-3fed65a45e35",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get Single Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get Single Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "});",
                  "",
                  "console.log('✅ Single todo retrieval completed successfully');"
                ],
                "_lastExecutionId": "74659b53-8c6d-49cb-80e5-c78b75a0c93e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get a single todo by ID (only if existing todos are present)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1e9d7a1ab7c8c788bab9c"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1067588f-9974-4660-a447-e434f8fd1467",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "501dbbf5-cd94-47fe-a858-dbd1e39dcf69",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "211"
            },
            {
              "key": "ETag",
              "value": "W/\"d3-kOagJ/JIalogteDMAPHuZdIMt7U\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 211
        },
        "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "d2af6e50-42b6-4460-9ec1-b53beb3570f0",
              "timestamp": 1758587436059,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Get Single Todo - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Get Single Todo - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "00abe183-86c8-4444-93a8-4e932ee932a4",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c9aab14-cdd9-4a10-b576-6efcca3e37e1"
        },
        "item": {
          "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
          "name": "🚀 Create High Priority Todo",
          "request": {
            "description": {
              "content": "Create a high priority todo item for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                  "    pm.expect(responseJson.data).to.have.property('completed', false);",
                  "});",
                  "",
                  "// Store the created todo ID for later operations",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                  "",
                  "console.log('✅ High priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);",
                  "console.log('📋 Title:', createdTodo.title);"
                ],
                "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a high priority todo item for testing",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "15ec8496-f658-4b31-b727-1e64539424d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "297",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
          }
        },
        "response": {
          "id": "993dcbe6-2757-4c1a-ae37-a82aef1eaedd",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "415"
            },
            {
              "key": "ETag",
              "value": "W/\"19f-D310vSe1p8blH+Gc9WQFyX3DI50\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 415
        },
        "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "1081ef06-ae06-4ae6-beac-96d434b8447a",
              "timestamp": 1758587436097,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Create High Priority Todo - Status Code is 201",
            "skipped": false
          },
          {
            "assertion": "Create High Priority Todo - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1f0e050-0f40-484b-a988-5fe2f34e13b9",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dfba9e6c-9971-47ff-a9a8-aebd84e2d634"
        },
        "item": {
          "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
          "name": "📝 Create Medium Priority Todo",
          "request": {
            "description": {
              "content": "Create a medium priority todo item",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Medium priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a medium priority todo item",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b36d920a-8db3-4f66-9982-d34611ba826f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "292",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
          }
        },
        "response": {
          "id": "89dc7238-8841-48e9-8bcb-84b48164a334",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "410"
            },
            {
              "key": "ETag",
              "value": "W/\"19a-es9wqphRVm1TU7465fglx0DCi4E\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              147,
              138,
              32,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              65,
              80,
              73,
              32,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              44,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              99,
              111,
              100,
              101,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              104,
              101,
              108,
              112,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              101,
              114,
              115,
              32,
              117,
              110,
              100,
              101,
              114,
              115,
              116,
              97,
              110,
              100,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              101,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 410
        },
        "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "aea23005-07d4-47d9-a3ba-79dfad7c0aec",
              "timestamp": 1758587436145,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Create Medium Priority Todo - Status Code is 201",
            "skipped": false
          },
          {
            "assertion": "Create Medium Priority Todo - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e2de34f9-d299-4647-8b72-0357e8a6efb9",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a5530785-9ffe-47ff-8afb-b38655f5dcc6"
        },
        "item": {
          "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
          "name": "📚 Create Low Priority Todo",
          "request": {
            "description": {
              "content": "Create a low priority todo item",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Low priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a low priority todo item",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6286aa91-63d4-49cc-854b-5415c61ba1b5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "254",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
          }
        },
        "response": {
          "id": "1e026b37-516e-43f8-9b1b-633a57c95cf3",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "372"
            },
            {
              "key": "ETag",
              "value": "W/\"174-3qLy1RmwQVSBt+E3OBrhYsk3tsc\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              142,
              168,
              32,
              73,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              85,
              73,
              47,
              85,
              88,
              32,
              68,
              101,
              115,
              105,
              103,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              110,
              104,
              97,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              121,
              111,
              117,
              116,
              46,
              32,
              65,
              100,
              100,
              32,
              97,
              110,
              105,
              109,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              111,
              118,
              101,
              114,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              105,
              109,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              116,
              115,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 372
        },
        "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "02f6f603-543a-462a-96e4-d6fa749e79f0",
              "timestamp": 1758587436183,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Create Low Priority Todo - Status Code is 201",
            "skipped": false
          },
          {
            "assertion": "Create Low Priority Todo - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bcd05b1d-0777-4c3a-bfd2-665c61f31b9d",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20664b3d-2c9e-49a7-bdfe-083b9072b56f"
        },
        "item": {
          "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
          "name": "✅ Create Completed Todo",
          "request": {
            "description": {
              "content": "Create a todo that is already marked as completed",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Completed Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Completed Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('completed', true);",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('completedTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Completed todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a todo that is already marked as completed",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95fd636b-794a-439f-b1e0-bd95dd174c5e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "268",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
          }
        },
        "response": {
          "id": "2fb287e7-b9a6-4419-a2c3-af686cf6af57",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "386"
            },
            {
              "key": "ETag",
              "value": "W/\"182-w5FSEgTZbJPpj2Fsv33rmbx3pws\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              226,
              156,
              133,
              32,
              83,
              101,
              116,
              117,
              112,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              44,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              117,
              112,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              116,
              97,
              115,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              50,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 386
        },
        "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "e5c59aa4-18e7-489b-b038-70675847456c",
              "timestamp": 1758587436233,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Create Completed Todo - Status Code is 201",
            "skipped": false
          },
          {
            "assertion": "Create Completed Todo - Response structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "92d654ad-5da7-456a-b9ec-b0309121b58c",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "45624f35-1a36-431b-a564-d479cf95fa43"
        },
        "item": {
          "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
          "name": "🔤 Create Todo with Special Characters",
          "request": {
            "description": {
              "content": "Create a todo with special characters and Unicode to test character encoding",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Special characters todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a todo with special characters and Unicode to test character encoding",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb5ab576-b788-498f-b844-589d236fb967",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "371",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
          }
        },
        "response": {
          "id": "26d06b18-872b-4abe-ae09-8f3de98b62e4",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "489"
            },
            {
              "key": "ETag",
              "value": "W/\"1e9-qzebW6fIU93ehZIn0aKL/fl5ino\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              140,
              141,
              32,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              38,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              84,
              101,
              115,
              116,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              109,
              111,
              106,
              105,
              115,
              58,
              32,
              228,
              189,
              160,
              229,
              165,
              189,
              32,
              208,
              188,
              208,
              184,
              209,
              128,
              32,
              216,
              167,
              217,
              132,
              216,
              185,
              216,
              167,
              217,
              132,
              217,
              133,
              32,
              240,
              159,
              154,
              128,
              240,
              159,
              147,
              139,
              226,
              156,
              133,
              240,
              159,
              142,
              175,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              115,
              32,
              118,
              97,
              114,
              105,
              111,
              117,
              115,
              32,
              112,
              117,
              110,
              99,
              116,
              117,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              32,
              97,
              110,
              100,
              32,
              109,
              97,
              116,
              104,
              101,
              109,
              97,
              116,
              105,
              99,
              97,
              108,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              58,
              32,
              226,
              136,
              145,
              226,
              136,
              143,
              226,
              136,
              171,
              226,
              136,
              154,
              226,
              136,
              158,
              226,
              137,
              160,
              226,
              137,
              164,
              226,
              137,
              165,
              194,
              177,
              195,
              151,
              195,
              183,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              52,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 489
        },
        "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "d797f7ec-00d3-4315-892a-df74575b3203",
              "timestamp": 1758587436295,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Create Special Characters Todo - Status Code is 201",
            "skipped": false
          },
          {
            "assertion": "Create Special Characters Todo - Handles special characters",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "56bfd107-2aed-4681-a381-98d6325520aa",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "44b958aa-619e-44ca-aba5-27001f6485d1"
        },
        "item": {
          "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
          "name": "📋 Get All Todos (After Creation)",
          "request": {
            "description": {
              "content": "Verify that all created todos are now present in the system",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                  "});",
                  "",
                  "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                  "    ",
                  "    createdTodos.forEach(todoId => {",
                  "        pm.expect(returnedTodoIds).to.include(todoId);",
                  "    });",
                  "});",
                  "",
                  "console.log('✅ All todos retrieved successfully after creation');",
                  "console.log('📊 Total todos now:', pm.response.json().count);"
                ],
                "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify that all created todos are now present in the system",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d25c6311-b232-4c3e-a892-03924896693b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e1281e53-84f2-473b-a163-5ae25e678c6f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "5304"
            },
            {
              "key": "ETag",
              "value": "W/\"14b8-v/FfiMmtmtpmmF6woy8wXolFqzU\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              56,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              140,
              141,
              32,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              38,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              84,
              101,
              115,
              116,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              109,
              111,
              106,
              105,
              115,
              58,
              32,
              228,
              189,
              160,
              229,
              165,
              189,
              32,
              208,
              188,
              208,
              184,
              209,
              128,
              32,
              216,
              167,
              217,
              132,
              216,
              185,
              216,
              167,
              217,
              132,
              217,
              133,
              32,
              240,
              159,
              154,
              128,
              240,
              159,
              147,
              139,
              226,
              156,
              133,
              240,
              159,
              142,
              175,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              115,
              32,
              118,
              97,
              114,
              105,
              111,
              117,
              115,
              32,
              112,
              117,
              110,
              99,
              116,
              117,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              32,
              97,
              110,
              100,
              32,
              109,
              97,
              116,
              104,
              101,
              109,
              97,
              116,
              105,
              99,
              97,
              108,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              58,
              32,
              226,
              136,
              145,
              226,
              136,
              143,
              226,
              136,
              171,
              226,
              136,
              154,
              226,
              136,
              158,
              226,
              137,
              160,
              226,
              137,
              164,
              226,
              137,
              165,
              194,
              177,
              195,
              151,
              195,
              183,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              226,
              156,
              133,
              32,
              83,
              101,
              116,
              117,
              112,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              44,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              117,
              112,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              116,
              97,
              115,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              142,
              168,
              32,
              73,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              85,
              73,
              47,
              85,
              88,
              32,
              68,
              101,
              115,
              105,
              103,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              110,
              104,
              97,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              121,
              111,
              117,
              116,
              46,
              32,
              65,
              100,
              100,
              32,
              97,
              110,
              105,
              109,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              111,
              118,
              101,
              114,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              105,
              109,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              116,
              115,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              147,
              138,
              32,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              65,
              80,
              73,
              32,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              44,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              99,
              111,
              100,
              101,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              104,
              101,
              108,
              112,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              101,
              114,
              115,
              32,
              117,
              110,
              100,
              101,
              114,
              115,
              116,
              97,
              110,
              100,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              54,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              55,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              82,
              85,
              68,
              32,
              84,
              101,
              115,
              116,
              32,
              84,
              111,
              100,
              111,
              32,
              49,
              55,
              53,
              56,
              53,
              56,
              55,
              51,
              53,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              119,
              97,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              99,
              114,
              105,
              112,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              53,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              82,
              69,
              65,
              68,
              77,
              69,
              32,
              97,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              97,
              108,
              105,
              116,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              97,
              99,
              114,
              111,
              115,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              116,
              105,
              116,
              108,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              79,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              32,
              105,
              110,
              100,
              101,
              120,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              111,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              102,
              111,
              114,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              67,
              73,
              47,
              67,
              68,
              32,
              112,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              101,
              100,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              117,
              110,
              105,
              116,
              32,
              116,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              111,
              118,
              101,
              114,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              32,
              97,
              110,
              100,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              98,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              105,
              110,
              112,
              117,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              98,
              111,
              116,
              104,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              45,
              115,
              105,
              100,
              101,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              45,
              115,
              105,
              100,
              101,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              32,
              102,
              111,
              114,
              109,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              68,
              101,
              115,
              105,
              103,
              110,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              105,
              118,
              101,
              32,
              85,
              73,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              109,
              111,
              100,
              101,
              114,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              108,
              105,
              115,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              101,
              97,
              99,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              55,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              101,
              97,
              114,
              110,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              110,
              101,
              119,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              116,
              117,
              100,
              121,
              32,
              99,
              111,
              110,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              44,
              32,
              83,
              117,
              115,
              112,
              101,
              110,
              115,
              101,
              44,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              99,
              32,
              98,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              44,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              57,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              82,
              69,
              83,
              84,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              115,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              69,
              120,
              112,
              114,
              101,
              115,
              115,
              46,
              106,
              115,
              32,
              97,
              110,
              100,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              78,
              111,
              100,
              101,
              46,
              106,
              115,
              44,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              44,
              32,
              97,
              110,
              100,
              32,
              68,
              111,
              99,
              107,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              49,
              50,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 5304
        },
        "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "af45b658-ce0a-4175-b475-35ce658d0686",
              "timestamp": 1758587436364,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Get All Todos After Creation - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Get All Todos After Creation - Todo count increased",
            "skipped": false
          },
          {
            "assertion": "Get All Todos After Creation - Contains created todos",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3ff7694c-4d46-43c2-a8aa-ee474cfeb8af",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c7995084-c385-44fd-a72d-c22ec8a4287f"
        },
        "item": {
          "id": "09424bfb-91b1-490b-b845-73c0d732667c",
          "name": "🔍 Get Single Created Todo",
          "request": {
            "description": {
              "content": "Get a specific todo that was created in the previous step",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{highPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const expectedId = pm.environment.get('highPriorityTodoId');",
                  "    ",
                  "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                  "    pm.expect(responseJson.data.priority).to.equal('high');",
                  "    pm.expect(responseJson.data.title).to.include('Urgent');",
                  "});",
                  "",
                  "console.log('✅ Single todo retrieved successfully');"
                ],
                "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get a specific todo that was created in the previous step",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad2c"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "67f2451c-6d2d-4b16-986c-2d8b9fe05a9c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6426741a-8144-40d9-9383-4d6cbcc2f07d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "415"
            },
            {
              "key": "ETag",
              "value": "W/\"19f-7mDydjRY9nKAB1J1ix76CpXVa2U\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 415
        },
        "id": "09424bfb-91b1-490b-b845-73c0d732667c",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "c2305d1a-1c45-464b-b06f-a2bebbdde2b1",
              "timestamp": 1758587436430,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Get Single Created Todo - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Get Single Created Todo - Correct todo returned",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca6908bb-7684-441b-8603-19ef87382242",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "48c78773-5f57-4d34-81fe-7bf4f39497bb"
        },
        "item": {
          "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
          "name": "🔍 Filter Todos by Priority (High)",
          "request": {
            "description": {
              "content": "Filter todos to only show high priority items",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "priority",
                  "value": "high"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.data.forEach(todo => {",
                  "        pm.expect(todo.priority).to.equal('high');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                  "    ",
                  "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                  "    pm.expect(foundTodo).to.not.be.undefined;",
                  "});",
                  "",
                  "console.log('✅ High priority filter working correctly');",
                  "console.log('📊 High priority todos found:', pm.response.json().count);"
                ],
                "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Filter todos to only show high priority items",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "priority",
                "value": "high"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "307bf689-9b27-4d29-add9-6b950d2ce784",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5e64ab16-f6b3-4856-8751-6aec1ce706b2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1615"
            },
            {
              "key": "ETag",
              "value": "W/\"64f-05sN0c9QAl9mchQvgG6DfZM/lBk\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              226,
              156,
              133,
              32,
              83,
              101,
              116,
              117,
              112,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              44,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              117,
              112,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              116,
              97,
              115,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              55,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              101,
              97,
              114,
              110,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              110,
              101,
              119,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              116,
              117,
              100,
              121,
              32,
              99,
              111,
              110,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              44,
              32,
              83,
              117,
              115,
              112,
              101,
              110,
              115,
              101,
              44,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              99,
              32,
              98,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              44,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              57,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              82,
              69,
              83,
              84,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              115,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              69,
              120,
              112,
              114,
              101,
              115,
              115,
              46,
              106,
              115,
              32,
              97,
              110,
              100,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              78,
              111,
              100,
              101,
              46,
              106,
              115,
              44,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              44,
              32,
              97,
              110,
              100,
              32,
              68,
              111,
              99,
              107,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              49,
              50,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 1615
        },
        "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ec0fef7c-3fbe-4717-acb3-678f514d63c9",
              "timestamp": 1758587436486,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Filter High Priority Todos - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Filter High Priority Todos - Only high priority returned",
            "skipped": false
          },
          {
            "assertion": "Filter High Priority Todos - Contains our created high priority todo",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7a78d0a-78ff-44e5-876b-85aaa02e5876",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "32ef4b4c-5633-406d-b5a9-061c081b20c5"
        },
        "item": {
          "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
          "name": "✅ Filter Completed Todos",
          "request": {
            "description": {
              "content": "Filter todos to only show completed items",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "completed",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filter Completed Todos - Only completed returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.data.forEach(todo => {",
                  "        pm.expect(todo.completed).to.equal(true);",
                  "    });",
                  "});",
                  "",
                  "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const completedId = pm.environment.get('completedTodoId');",
                  "    ",
                  "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                  "    pm.expect(foundTodo).to.not.be.undefined;",
                  "});",
                  "",
                  "console.log('✅ Completed filter working correctly');",
                  "console.log('📊 Completed todos found:', pm.response.json().count);"
                ],
                "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Filter todos to only show completed items",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "completed",
                "value": "true"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e0954a05-6192-488c-9cbc-f8dd7a99d044",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c2367d15-ddeb-461a-8db3-4cffb5da90bd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1307"
            },
            {
              "key": "ETag",
              "value": "W/\"51b-ZRdoblwotuAdygvcy8Huyo9LzUc\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              53,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              226,
              156,
              133,
              32,
              83,
              101,
              116,
              117,
              112,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              44,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              117,
              112,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              116,
              97,
              115,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              57,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              82,
              69,
              83,
              84,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              115,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              69,
              120,
              112,
              114,
              101,
              115,
              115,
              46,
              106,
              115,
              32,
              97,
              110,
              100,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              78,
              111,
              100,
              101,
              46,
              106,
              115,
              44,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              44,
              32,
              97,
              110,
              100,
              32,
              68,
              111,
              99,
              107,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              49,
              50,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 1307
        },
        "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "795e4e6e-7d88-4c9e-951f-c409d5b64468",
              "timestamp": 1758587436531,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Filter Completed Todos - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Filter Completed Todos - Only completed returned",
            "skipped": false
          },
          {
            "assertion": "Filter Completed Todos - Contains our completed todo",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7cb6ae49-9ea3-48f3-9a76-d2e6a413ffcc",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9e3154cc-a69c-48c0-a51b-03f4131e2b24"
        },
        "item": {
          "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
          "name": "📅 Sort Todos by Creation Date",
          "request": {
            "description": {
              "content": "Get todos sorted by creation date (newest first)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "-createdAt"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Sort Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sort Todos - Sorted by creation date', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    if (responseJson.data.length > 1) {",
                  "        for (let i = 1; i < responseJson.data.length; i++) {",
                  "            const currentDate = new Date(responseJson.data[i].createdAt);",
                  "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                  "            pm.expect(currentDate).to.be.at.most(previousDate);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "console.log('✅ Sorting by creation date working correctly');"
                ],
                "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get todos sorted by creation date (newest first)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "sort",
                "value": "-createdAt"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7eb13e7f-0ff1-4c7e-a092-a1a235a1e3ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "38b7ec87-60a8-47c6-894d-011054e4e863",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "5304"
            },
            {
              "key": "ETag",
              "value": "W/\"14b8-v/FfiMmtmtpmmF6woy8wXolFqzU\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              56,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              140,
              141,
              32,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              38,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              84,
              101,
              115,
              116,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              109,
              111,
              106,
              105,
              115,
              58,
              32,
              228,
              189,
              160,
              229,
              165,
              189,
              32,
              208,
              188,
              208,
              184,
              209,
              128,
              32,
              216,
              167,
              217,
              132,
              216,
              185,
              216,
              167,
              217,
              132,
              217,
              133,
              32,
              240,
              159,
              154,
              128,
              240,
              159,
              147,
              139,
              226,
              156,
              133,
              240,
              159,
              142,
              175,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              115,
              32,
              118,
              97,
              114,
              105,
              111,
              117,
              115,
              32,
              112,
              117,
              110,
              99,
              116,
              117,
              97,
              116,
              105,
              111,
              110,
              58,
              32,
              33,
              64,
              35,
              36,
              37,
              94,
              38,
              42,
              40,
              41,
              91,
              93,
              123,
              125,
              124,
              59,
              39,
              58,
              44,
              46,
              60,
              62,
              63,
              32,
              97,
              110,
              100,
              32,
              109,
              97,
              116,
              104,
              101,
              109,
              97,
              116,
              105,
              99,
              97,
              108,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              115,
              58,
              32,
              226,
              136,
              145,
              226,
              136,
              143,
              226,
              136,
              171,
              226,
              136,
              154,
              226,
              136,
              158,
              226,
              137,
              160,
              226,
              137,
              164,
              226,
              137,
              165,
              194,
              177,
              195,
              151,
              195,
              183,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              50,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              226,
              156,
              133,
              32,
              83,
              101,
              116,
              117,
              112,
              32,
              68,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              69,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              115,
              116,
              114,
              117,
              99,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              105,
              101,
              115,
              44,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              117,
              112,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              116,
              97,
              115,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              49,
              54,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              142,
              168,
              32,
              73,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              85,
              73,
              47,
              85,
              88,
              32,
              68,
              101,
              115,
              105,
              103,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              110,
              104,
              97,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              121,
              111,
              117,
              116,
              46,
              32,
              65,
              100,
              100,
              32,
              97,
              110,
              105,
              109,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              111,
              118,
              101,
              114,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              105,
              109,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              116,
              115,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              147,
              138,
              32,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              65,
              80,
              73,
              32,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              44,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              47,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              99,
              111,
              100,
              101,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              104,
              101,
              108,
              112,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              101,
              114,
              115,
              32,
              117,
              110,
              100,
              101,
              114,
              115,
              116,
              97,
              110,
              100,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              101,
              102,
              102,
              101,
              99,
              116,
              105,
              118,
              101,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              55,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              57,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              115,
              116,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              49,
              46,
              52,
              48,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              57,
              100,
              54,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              98,
              55,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              82,
              85,
              68,
              32,
              84,
              101,
              115,
              116,
              32,
              84,
              111,
              100,
              111,
              32,
              49,
              55,
              53,
              56,
              53,
              56,
              55,
              51,
              53,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              119,
              97,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              99,
              114,
              105,
              112,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              50,
              57,
              58,
              49,
              48,
              46,
              49,
              51,
              53,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              53,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              82,
              69,
              65,
              68,
              77,
              69,
              32,
              97,
              110,
              100,
              32,
              65,
              80,
              73,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              53,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              102,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              97,
              108,
              105,
              116,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              97,
              99,
              114,
              111,
              115,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              116,
              105,
              116,
              108,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              79,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              112,
              114,
              111,
              112,
              101,
              114,
              32,
              105,
              110,
              100,
              101,
              120,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              111,
              112,
              116,
              105,
              109,
              105,
              122,
              101,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              102,
              111,
              114,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              52,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              67,
              73,
              47,
              67,
              68,
              32,
              112,
              105,
              112,
              101,
              108,
              105,
              110,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              101,
              100,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              100,
              101,
              112,
              108,
              111,
              121,
              109,
              101,
              110,
              116,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              49,
              54,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              87,
              114,
              105,
              116,
              101,
              32,
              117,
              110,
              105,
              116,
              32,
              116,
              101,
              115,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              111,
              118,
              101,
              114,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              32,
              97,
              110,
              100,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              51,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              98,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              105,
              110,
              112,
              117,
              116,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              98,
              111,
              116,
              104,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              45,
              115,
              105,
              100,
              101,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              45,
              115,
              105,
              100,
              101,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              32,
              102,
              111,
              114,
              109,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              53,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              97,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              68,
              101,
              115,
              105,
              103,
              110,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              105,
              118,
              101,
              32,
              85,
              73,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              109,
              111,
              100,
              101,
              114,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              108,
              105,
              115,
              116,
              32,
              99,
              111,
              109,
              112,
              111,
              110,
              101,
              110,
              116,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              101,
              97,
              99,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              49,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              55,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              101,
              97,
              114,
              110,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              110,
              101,
              119,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              116,
              117,
              100,
              121,
              32,
              99,
              111,
              110,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              102,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              44,
              32,
              83,
              117,
              115,
              112,
              101,
              110,
              115,
              101,
              44,
              32,
              97,
              117,
              116,
              111,
              109,
              97,
              116,
              105,
              99,
              32,
              98,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              44,
              32,
              97,
              110,
              100,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              82,
              101,
              97,
              99,
              116,
              32,
              49,
              56,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              48,
              56,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              57,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              32,
              82,
              69,
              83,
              84,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              111,
              100,
              111,
              115,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              69,
              120,
              112,
              114,
              101,
              115,
              115,
              46,
              106,
              115,
              32,
              97,
              110,
              100,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              50,
              84,
              49,
              52,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              44,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              98,
              51,
              99,
              56,
              100,
              102,
              54,
              48,
              100,
              101,
              50,
              101,
              56,
              56,
              99,
              101,
              53,
              102,
              52,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              101,
              116,
              117,
              112,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              78,
              111,
              100,
              101,
              46,
              106,
              115,
              44,
              32,
              77,
              111,
              110,
              103,
              111,
              68,
              66,
              44,
              32,
              97,
              110,
              100,
              32,
              68,
              111,
              99,
              107,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              100,
              111,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              50,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              49,
              45,
              48,
              49,
              84,
              49,
              50,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 5304
        },
        "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "45086992-6895-4f8b-9bed-384c0c85b268",
              "timestamp": 1758587436560,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Sort Todos - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Sort Todos - Sorted by creation date",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "52b92b34-0481-4b57-881d-35a1ddd818c5",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6255882-d9dc-4991-b06e-a02d1fac60b7"
        },
        "item": {
          "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
          "name": "📝 Update Todo Title and Description",
          "request": {
            "description": {
              "content": "Update the title and description of an existing todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{mediumPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                  "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                  "});",
                  "",
                  "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                  "    // updatedAt should be different from createdAt",
                  "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                  "});",
                  "",
                  "console.log('✅ Todo title and description updated successfully');"
                ],
                "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update the title and description of an existing todo",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad2e"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f31529a-f524-4dd7-b738-bce32099d7e1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "239",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
          }
        },
        "response": {
          "id": "a6ee56b7-88ef-4eb1-bd23-4619231a0318",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "407"
            },
            {
              "key": "ETag",
              "value": "W/\"197-LK976WmZZcUdu3DnDeKjZJMVC28\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              148,
              132,
              32,
              85,
              80,
              68,
              65,
              84,
              69,
              68,
              58,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              109,
              111,
              100,
              105,
              102,
              105,
              101,
              100,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              80,
              85,
              84,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              102,
              114,
              97,
              109,
              101,
              119,
              111,
              114,
              107,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              108,
              108,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              119,
              111,
              114,
              107,
              105,
              110,
              103,
              32,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              108,
              121,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              53,
              56,
              50,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 407
        },
        "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "d5a15654-c625-4bb4-a7a0-1dec80e4c005",
              "timestamp": 1758587436590,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Update Todo Title/Description - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Update Todo Title/Description - Response structure correct",
            "skipped": false
          },
          {
            "assertion": "Update Todo Title/Description - UpdatedAt timestamp changed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1a729d3c-9558-4ab0-b3f3-bdf4f0f9d2ab",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fb7ecc75-643a-4ec2-a0e8-7959c43c8ba1"
        },
        "item": {
          "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
          "name": "✅ Mark Todo as Completed",
          "request": {
            "description": {
              "content": "Mark a todo as completed by updating the completed field",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{lowPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"completed\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Mark Todo Completed - Completion status updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('completed', true);",
                  "});",
                  "",
                  "console.log('✅ Todo marked as completed successfully');"
                ],
                "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Mark a todo as completed by updating the completed field",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad30"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d33391d0-6fca-4967-9493-a2378feb6859",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"completed\": true\n}"
          }
        },
        "response": {
          "id": "f972c90a-fcd8-4fd2-a7da-4768c80f6324",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "371"
            },
            {
              "key": "ETag",
              "value": "W/\"173-DfCm2E/i0qpdDjn3FIASa5a4NKE\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              48,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              142,
              168,
              32,
              73,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              85,
              73,
              47,
              85,
              88,
              32,
              68,
              101,
              115,
              105,
              103,
              110,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              110,
              104,
              97,
              110,
              99,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              101,
              116,
              116,
              101,
              114,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              121,
              111,
              117,
              116,
              46,
              32,
              65,
              100,
              100,
              32,
              97,
              110,
              105,
              109,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              105,
              109,
              112,
              114,
              111,
              118,
              101,
              32,
              111,
              118,
              101,
              114,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              105,
              109,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              116,
              115,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              108,
              111,
              119,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              49,
              55,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              54,
              49,
              51,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 371
        },
        "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "381a59d1-4e3c-4b09-95ed-dd435aebee65",
              "timestamp": 1758587436621,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Mark Todo Completed - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Mark Todo Completed - Completion status updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ae0a086c-1320-4058-a253-1af2091aca65",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32051ae8-ba0c-4834-9605-98889a5f2bcb"
        },
        "item": {
          "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
          "name": "🔄 Change Todo Priority",
          "request": {
            "description": {
              "content": "Change the priority level of an existing todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{highPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"priority\": \"medium\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Change Todo Priority - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                  "});",
                  "",
                  "console.log('✅ Todo priority changed successfully');"
                ],
                "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Change the priority level of an existing todo",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad2c"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb88b538-cb74-4522-a45a-dc482f133131",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "28",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"priority\": \"medium\"\n}"
          }
        },
        "response": {
          "id": "ee9e36d8-c046-44c2-8474-32de2cf87181",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "417"
            },
            {
              "key": "ETag",
              "value": "W/\"1a1-YaPghdGf8GE6wjS59hc+2QG6Cgw\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              50,
              99,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              154,
              168,
              32,
              85,
              114,
              103,
              101,
              110,
              116,
              58,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              65,
              80,
              73,
              32,
              84,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              101,
              116,
              32,
              117,
              112,
              32,
              99,
              111,
              109,
              112,
              114,
              101,
              104,
              101,
              110,
              115,
              105,
              118,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              32,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              108,
              108,
              32,
              67,
              82,
              85,
              68,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              104,
              105,
              103,
              104,
              32,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              116,
              97,
              115,
              107,
              32,
              116,
              104,
              97,
              116,
              32,
              110,
              101,
              101,
              100,
              115,
              32,
              105,
              109,
              109,
              101,
              100,
              105,
              97,
              116,
              101,
              32,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              113,
              117,
              97,
              108,
              105,
              116,
              121,
              32,
              97,
              115,
              115,
              117,
              114,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              54,
              51,
              56,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 417
        },
        "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "b5ec32cc-d592-4524-a124-3164135ecff4",
              "timestamp": 1758587436645,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Change Todo Priority - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Change Todo Priority - Priority updated correctly",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a912e2d1-ef07-4349-adb7-37a52ee1c729",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6876d150-5035-4180-9783-bb1f2bb79b85"
        },
        "item": {
          "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
          "name": "🔄 Update Multiple Fields",
          "request": {
            "description": {
              "content": "Update multiple fields of a todo in a single request",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Update Multiple Fields - All fields updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                  "    pm.expect(responseJson.data).to.have.property('completed', false);",
                  "});",
                  "",
                  "console.log('✅ Multiple fields updated successfully');"
                ],
                "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Update multiple fields of a todo in a single request",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad34"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e87730d0-c3c6-44c9-93d5-c5b93da2799e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "277",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
          }
        },
        "response": {
          "id": "802e246e-8122-4a66-9626-6e2fc775231b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "395"
            },
            {
              "key": "ETag",
              "value": "W/\"18b-VglvYklB7IcIdSg48NEkwnz0YkM\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              95,
              105,
              100,
              34,
              58,
              34,
              54,
              56,
              100,
              49,
              101,
              97,
              50,
              99,
              97,
              49,
              97,
              98,
              55,
              99,
              56,
              99,
              55,
              56,
              56,
              98,
              97,
              100,
              51,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              240,
              159,
              148,
              132,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              85,
              112,
              100,
              97,
              116,
              101,
              58,
              32,
              83,
              112,
              101,
              99,
              105,
              97,
              108,
              32,
              67,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              84,
              111,
              100,
              111,
              32,
              69,
              110,
              104,
              97,
              110,
              99,
              101,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              116,
              111,
              100,
              111,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              101,
              115,
              116,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              109,
              111,
              100,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              105,
              109,
              117,
              108,
              116,
              97,
              110,
              101,
              111,
              117,
              115,
              108,
              121,
              46,
              32,
              80,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              44,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              115,
              101,
              116,
              44,
              32,
              97,
              110,
              100,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              50,
              56,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              51,
              48,
              58,
              51,
              54,
              46,
              54,
              54,
              52,
              90,
              34,
              44,
              34,
              95,
              95,
              118,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 395
        },
        "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "fc910739-b15c-4f1a-a032-81780ad610c0",
              "timestamp": 1758587436679,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Update Multiple Fields - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Update Multiple Fields - All fields updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b40b92a9-9a13-4b56-8896-934e5405c494",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e266d6df-ec80-4ced-acac-180403ebf118"
        },
        "item": {
          "id": "29dd756e-e93b-4361-88ec-b35e63380c81",
          "name": "📈 Get Updated Todo Statistics",
          "request": {
            "description": {
              "content": "Get updated statistics after all CRUD operations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "133480fb-63ef-47b9-9b2d-89eb5dba8e99",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Updated Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated Stats - Statistics reflect changes', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    pm.expect(responseJson.data.total).to.equal(initialTotal + createdTodos.length);",
                  "    pm.expect(responseJson.data.completed).to.be.at.least(1); // At least one completed",
                  "    pm.expect(responseJson.data.pending).to.be.at.least(1); // At least one pending",
                  "});",
                  "",
                  "const stats = pm.response.json().data;",
                  "console.log('📊 Updated Statistics:');",
                  "console.log('   Total todos:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Statistics updated correctly after CRUD operations');"
                ],
                "_lastExecutionId": "16ae93cd-1f46-472d-970f-fe8df70e95a1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get updated statistics after all CRUD operations",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1dd421c8-09fe-4e17-8671-f83fd5926d15",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "84738e93-e76d-41a7-8124-9429d1cb2218",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "106"
            },
            {
              "key": "ETag",
              "value": "W/\"6a-GJ66nwHQGKKIicZFLB5ZNqBaAo4\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              56,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              54,
              44,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              49,
              50,
              44,
              34,
              98,
              121,
              80,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              123,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              58,
              56,
              44,
              34,
              108,
              111,
              119,
              34,
              58,
              53,
              44,
              34,
              104,
              105,
              103,
              104,
              34,
              58,
              53,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 106
        },
        "id": "29dd756e-e93b-4361-88ec-b35e63380c81",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "19e50750-29a1-45db-95a1-9ef93e6d5054",
              "timestamp": 1758587436721,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Updated Stats - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Updated Stats - Statistics reflect changes",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "87adce9d-9228-4eb5-9eb4-00759b930107",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "727a30cf-b589-4020-bcd8-257213cd2059"
        },
        "item": {
          "id": "f0eeb758-f265-4193-b958-96db8ded6027",
          "name": "🗑️ Delete Single Todo",
          "request": {
            "description": {
              "content": "Delete a specific todo by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6bff527f-6014-4968-aa8d-3badd9c99beb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delete Todo - Success message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "// Remove from created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const deletedId = pm.environment.get('specialCharsTodoId');",
                  "createdTodos = createdTodos.filter(id => id !== deletedId);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Todo deleted successfully');",
                  "console.log('🗑️ Deleted todo ID:', deletedId);"
                ],
                "_lastExecutionId": "8bbf863c-aafe-48ed-9cca-f3e8bbd86bee"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Delete a specific todo by ID",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad34"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3b411484-dca1-4f0a-8d5e-2d7202a2f7a7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "36352802-a54f-4420-9d3b-d81f24862e7e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "ETag",
              "value": "W/\"36-ZAYXccA+eLOWtE48z/m7lobjLsA\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 54
        },
        "id": "f0eeb758-f265-4193-b958-96db8ded6027",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "3fe501af-9ff7-409f-9b88-56a1cebd2705",
              "timestamp": 1758587436747,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Delete Todo - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Delete Todo - Success message returned",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e5f0ed43-8b72-4e9d-bc89-76b972a0f1f3",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f20fe201-1f6c-41dd-a8c2-044f7b7a5bc8"
        },
        "item": {
          "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
          "name": "🔍 Verify Todo Deletion",
          "request": {
            "description": {
              "content": "Try to get the deleted todo to verify it no longer exists",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "973639be-8841-40ea-9f68-6f431bdcb378",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Verify Deletion - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Verify Deletion - Error message for not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Deletion verified - todo no longer exists');"
                ],
                "_lastExecutionId": "e20367a9-0bab-490f-b362-bf322b2e623d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Try to get the deleted todo to verify it no longer exists",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad34"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ee08c3a7-72cf-400f-a1f2-65cf7a865ef7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4af3edd4-2f3d-4225-9949-ae3fcad4623a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-GOKwj8QVupG/E0wLs/vsFylPVfY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 42
        },
        "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "5c11fdb9-1e36-442a-9e80-d5bbdf120c2f",
              "timestamp": 1758587436792,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Verify Deletion - Status Code is 404",
            "skipped": false
          },
          {
            "assertion": "Verify Deletion - Error message for not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b2815bd-e9eb-4226-83f1-27a5ec3a3e4f",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "27a683da-d87f-4760-b20f-f2bf7dc393bc"
        },
        "item": {
          "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
          "name": "❌ Get Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to get a todo that doesn't exist",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439011"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Non-Existent Todo - Error structure correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Error handling for non-existent todo works correctly');"
                ],
                "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test error handling when trying to get a todo that doesn't exist",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "507f1f77bcf86cd799439011"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95bd2292-5631-461e-811e-6510082cbd80",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ab493bf6-d9ed-4ec9-a1f7-a95f8cab40da",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-GOKwj8QVupG/E0wLs/vsFylPVfY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 42
        },
        "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "8c9a6c13-0c15-49a6-bb52-3dd002f822e0",
              "timestamp": 1758587436832,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Non-Existent Todo - Status Code is 404",
            "skipped": false
          },
          {
            "assertion": "Non-Existent Todo - Error structure correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "94eee0c5-1ceb-46a5-bb22-a1c7b6aaa56a",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3804055e-ee65-4d68-b303-941e3b15fee8"
        },
        "item": {
          "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
          "name": "❌ Create Todo with Invalid Data",
          "request": {
            "description": {
              "content": "Test validation by trying to create a todo with invalid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid Todo Data - Validation error returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Validation error handling works correctly');"
                ],
                "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test validation by trying to create a todo with invalid data",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "980648c9-51c2-4e12-9b23-d8bb6697bb20",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "91",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
          }
        },
        "response": {
          "id": "55d66108-cb53-4c7e-8e63-9761f6a787bc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "269"
            },
            {
              "key": "ETag",
              "value": "W/\"10d-/AEA+uNFyKBLSt3hgmYy51yMf5s\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              69,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              84,
              105,
              116,
              108,
              101,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              44,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              98,
              111,
              100,
              121,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              80,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              108,
              111,
              119,
              44,
              32,
              109,
              101,
              100,
              105,
              117,
              109,
              44,
              32,
              111,
              114,
              32,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              44,
              34,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              98,
              111,
              100,
              121,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 269
        },
        "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "355d0c82-4518-4e43-809a-10010672aa5a",
              "timestamp": 1758587436869,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Invalid Todo Data - Status Code is 400",
            "skipped": false
          },
          {
            "assertion": "Invalid Todo Data - Validation error returned",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fcfc24c0-25d1-4e85-b3e3-8ec06bfae8d6",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7fd88a26-cf41-4b47-a713-a8991a3724df"
        },
        "item": {
          "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
          "name": "❌ Update Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to update a non-existent todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439012"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"This update should fail\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Non-Existent - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Update Non-Existent - Error message correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Update error handling works correctly');"
                ],
                "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test error handling when trying to update a non-existent todo",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "507f1f77bcf86cd799439012"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e87ae4c0-9ca0-442d-9da0-0553ba968b28",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "42",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"title\": \"This update should fail\"\n}"
          }
        },
        "response": {
          "id": "a92b2b37-9c36-4ee1-a643-0631bbf1cdcc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-GOKwj8QVupG/E0wLs/vsFylPVfY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 42
        },
        "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "63e88fe6-8685-47a5-816e-540e0b96a3c1",
              "timestamp": 1758587436901,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Update Non-Existent - Status Code is 404",
            "skipped": false
          },
          {
            "assertion": "Update Non-Existent - Error message correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9a4b60e3-a920-4ca7-91e5-462bd558236e",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86549cc2-c380-4144-8b7e-64683b6738f7"
        },
        "item": {
          "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
          "name": "❌ Delete Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to delete a non-existent todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439013"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Delete Non-Existent - Error message correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Delete error handling works correctly');"
                ],
                "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Test error handling when trying to delete a non-existent todo",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "507f1f77bcf86cd799439013"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "53d4ab73-269d-4fa3-a914-f2bd22d1ccb1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "70bda8e6-91ca-4633-9291-55c277e2de2d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-GOKwj8QVupG/E0wLs/vsFylPVfY\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 42
        },
        "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "e9b7db6e-51a1-4f82-8db9-d6d9b917b20e",
              "timestamp": 1758587436924,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Delete Non-Existent - Status Code is 404",
            "skipped": false
          },
          {
            "assertion": "Delete Non-Existent - Error message correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98f1f88b-818b-4921-9d39-bdb4fc73865f",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2281aa5b-81cc-424d-8b49-3a1a808334c4"
        },
        "item": {
          "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
          "name": "📊 Final Statistics Check",
          "request": {
            "description": {
              "content": "Final verification of todo statistics after all operations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c423e25a-cafc-4933-a85d-b8e9a3d559ea",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Final Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const stats = pm.response.json().data;",
                  "const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                  "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const expectedTotal = initialTotal + createdTodos.length;",
                  "",
                  "pm.test('Final Stats - Todo counts are correct', function () {",
                  "    pm.expect(stats.total).to.equal(expectedTotal);",
                  "});",
                  "",
                  "console.log('📊 Final Statistics:');",
                  "console.log('   Initial todos:', initialTotal);",
                  "console.log('   Created todos:', createdTodos.length);",
                  "console.log('   Deleted todos:', 1);",
                  "console.log('   Expected total:', expectedTotal);",
                  "console.log('   Actual total:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Final statistics verification completed');"
                ],
                "_lastExecutionId": "d0d68586-7243-4248-b80a-c4f73191f9f2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Final verification of todo statistics after all operations",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c1054b5-f29d-485a-b138-b91f32d05327",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3ff1dd6f-4c11-4ef2-8ad3-e82f3143a76c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "106"
            },
            {
              "key": "ETag",
              "value": "W/\"6a-X8JrKceToNYJF7bsPR5tEIkHoh4\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              55,
              44,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              54,
              44,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              49,
              49,
              44,
              34,
              98,
              121,
              80,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              123,
              34,
              109,
              101,
              100,
              105,
              117,
              109,
              34,
              58,
              56,
              44,
              34,
              104,
              105,
              103,
              104,
              34,
              58,
              52,
              44,
              34,
              108,
              111,
              119,
              34,
              58,
              53,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 106
        },
        "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "ee0ba394-2259-40b9-bd7f-9e08f832ddc8",
              "timestamp": 1758587436950,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Final Stats - Status Code is 200",
            "skipped": false
          },
          {
            "assertion": "Final Stats - Todo counts are correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "93c60dcb-d05b-4283-9714-7e3e26be4161",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4416c92e-fdbb-44c7-8899-a15bb8221540"
        },
        "item": {
          "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
          "name": "🗑️ Cleanup Created Test Todos",
          "request": {
            "description": {
              "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{currentCleanupTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "463117e1-54d5-42e8-a1e9-872335c6425f",
                "type": "text/javascript",
                "exec": [
                  "// Get remaining created todos to clean up",
                  "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "",
                  "if (createdTodos.length === 0) {",
                  "    console.log('⏭️ No todos to clean up');",
                  "    pm.execution.skipRequest();",
                  "} else {",
                  "    // Set the first todo ID for deletion",
                  "    pm.environment.set('currentCleanupTodoId', createdTodos[0]);",
                  "    console.log('🧹 Cleaning up todo:', createdTodos[0]);",
                  "}"
                ],
                "_lastExecutionId": "b9906031-c63a-4b26-9631-4f494811da8d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4d4e7544-126e-4a77-afcd-3ca6295bb332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cleanup Todo - Deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Remove the deleted todo from the list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const deletedId = pm.environment.get('currentCleanupTodoId');",
                  "createdTodos = createdTodos.filter(id => id !== deletedId);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('🗑️ Cleaned up todo:', deletedId);",
                  "console.log('📋 Remaining todos to clean:', createdTodos.length);",
                  "",
                  "// If there are more todos to clean up, set up for next iteration",
                  "if (createdTodos.length > 0) {",
                  "    console.log('🔄 More cleanup needed. Run this request again or continue with remaining todos.');",
                  "} else {",
                  "    console.log('✅ All test todos cleaned up successfully!');",
                  "}"
                ],
                "_lastExecutionId": "857364f7-b4c5-4189-90e1-6ed8cd5cacd4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "api",
              "todos",
              "68d1ea2ca1ab7c8c788bad2c"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abaab241-90d7-414d-9cef-c7b4a779be1a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "76494653-3198-4747-adee-34092a36d056",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
            },
            {
              "key": "Cross-Origin-Opener-Policy",
              "value": "same-origin"
            },
            {
              "key": "Cross-Origin-Resource-Policy",
              "value": "same-origin"
            },
            {
              "key": "Origin-Agent-Cluster",
              "value": "?1"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=31536000; includeSubDomains"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "ETag",
              "value": "W/\"36-ZAYXccA+eLOWtE48z/m7lobjLsA\""
            },
            {
              "key": "Date",
              "value": "Tue, 23 Sep 2025 00:30:36 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              100,
              111,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 54
        },
        "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "SyntaxError",
              "message": "Identifier 'responseTime' has already been declared",
              "checksum": "92eb19195e3825d898c0af45c28209ea",
              "id": "eaa01411-c0a4-400f-b014-aa0326009a4d",
              "timestamp": 1758587436981,
              "stacktrace": []
            }
          }
        ],
        "assertions": [
          {
            "assertion": "Cleanup Todo - Deletion successful",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 22218
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "f5a08b18-e32d-47be-93cb-29668f5afcce",
          "timestamp": 1758587435840,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1885d426-9b7f-4d96-8b20-16614223f739",
          "name": "🩺 API Health Check",
          "request": {
            "description": {
              "content": "Verify that the API server is running and healthy before starting tests",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "359e7c6b-1dbc-4365-bfcc-7c3486040568",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API Health Check - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('API Health Check - Response has success field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('API Health Check - Response has message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('API Health Check - Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "console.log('✅ API Health Check completed successfully');",
                  "console.log('📊 Response time:', pm.response.responseTime, 'ms');"
                ],
                "_lastExecutionId": "b705b6bf-7724-45cc-b547-abadeb82f7d8"
              }
            }
          ]
        },
        "parent": {
          "id": "05234ea4-2faa-4510-83d2-2b389b1db266",
          "name": "🏥 Health & Setup",
          "item": [
            {
              "id": "1885d426-9b7f-4d96-8b20-16614223f739",
              "name": "🩺 API Health Check",
              "request": {
                "description": {
                  "content": "Verify that the API server is running and healthy before starting tests",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "359e7c6b-1dbc-4365-bfcc-7c3486040568",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Health Check - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('API Health Check - Response has success field', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "});",
                      "",
                      "pm.test('API Health Check - Response has message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('API Health Check - Response time is reasonable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "console.log('✅ API Health Check completed successfully');",
                      "console.log('📊 Response time:', pm.response.responseTime, 'ms');"
                    ],
                    "_lastExecutionId": "b705b6bf-7724-45cc-b547-abadeb82f7d8"
                  }
                }
              ]
            },
            {
              "id": "3245f151-bad0-491b-9564-296c4acac5cc",
              "name": "🌐 Root Endpoint Info",
              "request": {
                "description": {
                  "content": "Get API information and available endpoints",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d989185c-f11a-4236-b4d5-27a7a6f3e53c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Root Endpoint - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Root Endpoint - Has API information', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson).to.have.property('endpoints');",
                      "});",
                      "",
                      "console.log('✅ Root endpoint verification completed');"
                    ],
                    "_lastExecutionId": "a6826da7-3fbf-42a2-a8cc-f48d12a55ce0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3647ef4b-790c-4f76-bf31-3bdb6c8c7b05",
          "httpRequestId": "6936ee4b-d4b2-45eb-98b8-7336e863482b",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ff0025ec-932c-4121-a0d2-978a3ab71c86",
          "timestamp": 1758587435890,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3245f151-bad0-491b-9564-296c4acac5cc",
          "name": "🌐 Root Endpoint Info",
          "request": {
            "description": {
              "content": "Get API information and available endpoints",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d989185c-f11a-4236-b4d5-27a7a6f3e53c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Root Endpoint - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Root Endpoint - Has API information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "console.log('✅ Root endpoint verification completed');"
                ],
                "_lastExecutionId": "a6826da7-3fbf-42a2-a8cc-f48d12a55ce0"
              }
            }
          ]
        },
        "parent": {
          "id": "05234ea4-2faa-4510-83d2-2b389b1db266",
          "name": "🏥 Health & Setup",
          "item": [
            {
              "id": "1885d426-9b7f-4d96-8b20-16614223f739",
              "name": "🩺 API Health Check",
              "request": {
                "description": {
                  "content": "Verify that the API server is running and healthy before starting tests",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "359e7c6b-1dbc-4365-bfcc-7c3486040568",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API Health Check - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('API Health Check - Response has success field', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "});",
                      "",
                      "pm.test('API Health Check - Response has message', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});",
                      "",
                      "pm.test('API Health Check - Response time is reasonable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "console.log('✅ API Health Check completed successfully');",
                      "console.log('📊 Response time:', pm.response.responseTime, 'ms');"
                    ],
                    "_lastExecutionId": "b705b6bf-7724-45cc-b547-abadeb82f7d8"
                  }
                }
              ]
            },
            {
              "id": "3245f151-bad0-491b-9564-296c4acac5cc",
              "name": "🌐 Root Endpoint Info",
              "request": {
                "description": {
                  "content": "Get API information and available endpoints",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d989185c-f11a-4236-b4d5-27a7a6f3e53c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Root Endpoint - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Root Endpoint - Has API information', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "    pm.expect(responseJson).to.have.property('endpoints');",
                      "});",
                      "",
                      "console.log('✅ Root endpoint verification completed');"
                    ],
                    "_lastExecutionId": "a6826da7-3fbf-42a2-a8cc-f48d12a55ce0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5f4c0450-1ad9-43d7-b55d-03eb2201aa78",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "529a716c-bcc6-4d57-83ee-661037d60af6",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "e76de0a3-12d9-4830-a425-e0dcada1dc35",
          "timestamp": 1758587435932,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e6c70f51-ed17-4976-91d9-d33b54362c5a",
          "name": "📈 Get Initial Todo Statistics",
          "request": {
            "description": {
              "content": "Get initial todo statistics before running tests",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7e95c4e-5fc0-4838-ac7b-4450afa733d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Initial Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Initial Stats - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data).to.have.property('completed');",
                  "    pm.expect(responseJson.data).to.have.property('pending');",
                  "});",
                  "",
                  "// Store initial stats for comparison",
                  "const stats = pm.response.json().data;",
                  "pm.environment.set('initialTotalTodos', stats.total);",
                  "pm.environment.set('initialCompletedTodos', stats.completed);",
                  "pm.environment.set('initialPendingTodos', stats.pending);",
                  "",
                  "console.log('📊 Initial Statistics:');",
                  "console.log('   Total todos:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Initial statistics recorded');"
                ],
                "_lastExecutionId": "0800c333-2d7b-4317-8308-3c8f27c54ac4"
              }
            }
          ]
        },
        "parent": {
          "id": "57f19ec3-ba5b-4917-bf05-b03b6b1c4ed0",
          "name": "📊 Statistics (Before Tests)",
          "item": [
            {
              "id": "e6c70f51-ed17-4976-91d9-d33b54362c5a",
              "name": "📈 Get Initial Todo Statistics",
              "request": {
                "description": {
                  "content": "Get initial todo statistics before running tests",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7e95c4e-5fc0-4838-ac7b-4450afa733d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Initial Stats - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Initial Stats - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('total');",
                      "    pm.expect(responseJson.data).to.have.property('completed');",
                      "    pm.expect(responseJson.data).to.have.property('pending');",
                      "});",
                      "",
                      "// Store initial stats for comparison",
                      "const stats = pm.response.json().data;",
                      "pm.environment.set('initialTotalTodos', stats.total);",
                      "pm.environment.set('initialCompletedTodos', stats.completed);",
                      "pm.environment.set('initialPendingTodos', stats.pending);",
                      "",
                      "console.log('📊 Initial Statistics:');",
                      "console.log('   Total todos:', stats.total);",
                      "console.log('   Completed:', stats.completed);",
                      "console.log('   Pending:', stats.pending);",
                      "console.log('✅ Initial statistics recorded');"
                    ],
                    "_lastExecutionId": "0800c333-2d7b-4317-8308-3c8f27c54ac4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "be480477-305e-4215-9319-733b4244e750",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2dfa6688-0c95-4635-9fe9-81d7ece188cb",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "6916560e-a7e8-4d6a-903d-7480fec776e7",
          "timestamp": 1758587435994,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
          "name": "📋 Get All Todos (Initial)",
          "request": {
            "description": {
              "content": "Retrieve all existing todos to establish baseline",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b59a2ae-fed3-4569-9a91-66d9463928b2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get All Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get All Todos - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "// Store existing todos count for verification",
                  "const response = pm.response.json();",
                  "pm.environment.set('existingTodosCount', response.count);",
                  "",
                  "console.log('📋 Found', response.count, 'existing todos');",
                  "",
                  "// If there are existing todos, store the first one's ID for single todo test",
                  "if (response.data.length > 0) {",
                  "    pm.environment.set('existingTodoId', response.data[0]._id);",
                  "    console.log('💾 Stored existing todo ID for single todo test:', response.data[0]._id);",
                  "}",
                  "",
                  "console.log('✅ Get all todos completed successfully');"
                ],
                "_lastExecutionId": "2b47e8cd-fe4d-4ed7-9d83-5363a2ca8982"
              }
            }
          ]
        },
        "parent": {
          "id": "28698c3b-5fd7-460f-9341-058e22ec7846",
          "name": "📚 READ Operations",
          "item": [
            {
              "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
              "name": "📋 Get All Todos (Initial)",
              "request": {
                "description": {
                  "content": "Retrieve all existing todos to establish baseline",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b59a2ae-fed3-4569-9a91-66d9463928b2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson).to.have.property('count');",
                      "    pm.expect(responseJson.data).to.be.an('array');",
                      "});",
                      "",
                      "// Store existing todos count for verification",
                      "const response = pm.response.json();",
                      "pm.environment.set('existingTodosCount', response.count);",
                      "",
                      "console.log('📋 Found', response.count, 'existing todos');",
                      "",
                      "// If there are existing todos, store the first one's ID for single todo test",
                      "if (response.data.length > 0) {",
                      "    pm.environment.set('existingTodoId', response.data[0]._id);",
                      "    console.log('💾 Stored existing todo ID for single todo test:', response.data[0]._id);",
                      "}",
                      "",
                      "console.log('✅ Get all todos completed successfully');"
                    ],
                    "_lastExecutionId": "2b47e8cd-fe4d-4ed7-9d83-5363a2ca8982"
                  }
                }
              ]
            },
            {
              "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
              "name": "🔍 Get Single Todo (If Exists)",
              "request": {
                "description": {
                  "content": "Get a single todo by ID (only if existing todos are present)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{existingTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "81b0c51e-7880-4014-a5d5-573acf7de5de",
                    "type": "text/javascript",
                    "exec": [
                      "// Skip this test if no existing todos",
                      "if (!pm.environment.get('existingTodoId')) {",
                      "    console.log('⏭️ Skipping single todo test - no existing todos found');",
                      "    pm.execution.skipRequest();",
                      "}"
                    ],
                    "_lastExecutionId": "885a9746-a886-48a8-82e3-0ecfd991f346"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e27e7405-8989-4c2e-b24a-3fed65a45e35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieval completed successfully');"
                    ],
                    "_lastExecutionId": "74659b53-8c6d-49cb-80e5-c78b75a0c93e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "efd550ed-c0b7-4504-805c-0a785affe3c8",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "700c48c8-0ee7-4ede-907c-bcf3f9e42b20",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "d2af6e50-42b6-4460-9ec1-b53beb3570f0",
          "timestamp": 1758587436059,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
          "name": "🔍 Get Single Todo (If Exists)",
          "request": {
            "description": {
              "content": "Get a single todo by ID (only if existing todos are present)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{existingTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "81b0c51e-7880-4014-a5d5-573acf7de5de",
                "type": "text/javascript",
                "exec": [
                  "// Skip this test if no existing todos",
                  "if (!pm.environment.get('existingTodoId')) {",
                  "    console.log('⏭️ Skipping single todo test - no existing todos found');",
                  "    pm.execution.skipRequest();",
                  "}"
                ],
                "_lastExecutionId": "885a9746-a886-48a8-82e3-0ecfd991f346"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e27e7405-8989-4c2e-b24a-3fed65a45e35",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get Single Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get Single Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "});",
                  "",
                  "console.log('✅ Single todo retrieval completed successfully');"
                ],
                "_lastExecutionId": "74659b53-8c6d-49cb-80e5-c78b75a0c93e"
              }
            }
          ]
        },
        "parent": {
          "id": "28698c3b-5fd7-460f-9341-058e22ec7846",
          "name": "📚 READ Operations",
          "item": [
            {
              "id": "8abf32c5-7f17-4721-868d-bb6ae0297e97",
              "name": "📋 Get All Todos (Initial)",
              "request": {
                "description": {
                  "content": "Retrieve all existing todos to establish baseline",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b59a2ae-fed3-4569-9a91-66d9463928b2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson).to.have.property('count');",
                      "    pm.expect(responseJson.data).to.be.an('array');",
                      "});",
                      "",
                      "// Store existing todos count for verification",
                      "const response = pm.response.json();",
                      "pm.environment.set('existingTodosCount', response.count);",
                      "",
                      "console.log('📋 Found', response.count, 'existing todos');",
                      "",
                      "// If there are existing todos, store the first one's ID for single todo test",
                      "if (response.data.length > 0) {",
                      "    pm.environment.set('existingTodoId', response.data[0]._id);",
                      "    console.log('💾 Stored existing todo ID for single todo test:', response.data[0]._id);",
                      "}",
                      "",
                      "console.log('✅ Get all todos completed successfully');"
                    ],
                    "_lastExecutionId": "2b47e8cd-fe4d-4ed7-9d83-5363a2ca8982"
                  }
                }
              ]
            },
            {
              "id": "ec56b8e0-ff9b-4e1c-92b1-b4fe4f14dec5",
              "name": "🔍 Get Single Todo (If Exists)",
              "request": {
                "description": {
                  "content": "Get a single todo by ID (only if existing todos are present)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{existingTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "81b0c51e-7880-4014-a5d5-573acf7de5de",
                    "type": "text/javascript",
                    "exec": [
                      "// Skip this test if no existing todos",
                      "if (!pm.environment.get('existingTodoId')) {",
                      "    console.log('⏭️ Skipping single todo test - no existing todos found');",
                      "    pm.execution.skipRequest();",
                      "}"
                    ],
                    "_lastExecutionId": "885a9746-a886-48a8-82e3-0ecfd991f346"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e27e7405-8989-4c2e-b24a-3fed65a45e35",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieval completed successfully');"
                    ],
                    "_lastExecutionId": "74659b53-8c6d-49cb-80e5-c78b75a0c93e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "41888942-e58b-4120-83fd-821003d2dbd3",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8879c636-1351-4487-b3b8-f558856f2520",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "1081ef06-ae06-4ae6-beac-96d434b8447a",
          "timestamp": 1758587436097,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
          "name": "🚀 Create High Priority Todo",
          "request": {
            "description": {
              "content": "Create a high priority todo item for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                  "    pm.expect(responseJson.data).to.have.property('completed', false);",
                  "});",
                  "",
                  "// Store the created todo ID for later operations",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                  "",
                  "console.log('✅ High priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);",
                  "console.log('📋 Title:', createdTodo.title);"
                ],
                "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
              }
            }
          ]
        },
        "parent": {
          "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
          "name": "➕ CREATE Operations",
          "item": [
            {
              "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
              "name": "🚀 Create High Priority Todo",
              "request": {
                "description": {
                  "content": "Create a high priority todo item for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "// Store the created todo ID for later operations",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                      "",
                      "console.log('✅ High priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);",
                      "console.log('📋 Title:', createdTodo.title);"
                    ],
                    "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                  }
                }
              ]
            },
            {
              "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
              "name": "📝 Create Medium Priority Todo",
              "request": {
                "description": {
                  "content": "Create a medium priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Medium priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                  }
                }
              ]
            },
            {
              "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
              "name": "📚 Create Low Priority Todo",
              "request": {
                "description": {
                  "content": "Create a low priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Low priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                  }
                }
              ]
            },
            {
              "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
              "name": "✅ Create Completed Todo",
              "request": {
                "description": {
                  "content": "Create a todo that is already marked as completed",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Completed Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Completed Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('completedTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Completed todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                  }
                }
              ]
            },
            {
              "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
              "name": "🔤 Create Todo with Special Characters",
              "request": {
                "description": {
                  "content": "Create a todo with special characters and Unicode to test character encoding",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Special characters todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "00abe183-86c8-4444-93a8-4e932ee932a4",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c9aab14-cdd9-4a10-b576-6efcca3e37e1",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "aea23005-07d4-47d9-a3ba-79dfad7c0aec",
          "timestamp": 1758587436145,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
          "name": "📝 Create Medium Priority Todo",
          "request": {
            "description": {
              "content": "Create a medium priority todo item",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Medium priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
              }
            }
          ]
        },
        "parent": {
          "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
          "name": "➕ CREATE Operations",
          "item": [
            {
              "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
              "name": "🚀 Create High Priority Todo",
              "request": {
                "description": {
                  "content": "Create a high priority todo item for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "// Store the created todo ID for later operations",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                      "",
                      "console.log('✅ High priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);",
                      "console.log('📋 Title:', createdTodo.title);"
                    ],
                    "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                  }
                }
              ]
            },
            {
              "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
              "name": "📝 Create Medium Priority Todo",
              "request": {
                "description": {
                  "content": "Create a medium priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Medium priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                  }
                }
              ]
            },
            {
              "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
              "name": "📚 Create Low Priority Todo",
              "request": {
                "description": {
                  "content": "Create a low priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Low priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                  }
                }
              ]
            },
            {
              "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
              "name": "✅ Create Completed Todo",
              "request": {
                "description": {
                  "content": "Create a todo that is already marked as completed",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Completed Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Completed Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('completedTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Completed todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                  }
                }
              ]
            },
            {
              "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
              "name": "🔤 Create Todo with Special Characters",
              "request": {
                "description": {
                  "content": "Create a todo with special characters and Unicode to test character encoding",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Special characters todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c1f0e050-0f40-484b-a988-5fe2f34e13b9",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dfba9e6c-9971-47ff-a9a8-aebd84e2d634",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "02f6f603-543a-462a-96e4-d6fa749e79f0",
          "timestamp": 1758587436183,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
          "name": "📚 Create Low Priority Todo",
          "request": {
            "description": {
              "content": "Create a low priority todo item",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Low priority todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
              }
            }
          ]
        },
        "parent": {
          "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
          "name": "➕ CREATE Operations",
          "item": [
            {
              "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
              "name": "🚀 Create High Priority Todo",
              "request": {
                "description": {
                  "content": "Create a high priority todo item for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "// Store the created todo ID for later operations",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                      "",
                      "console.log('✅ High priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);",
                      "console.log('📋 Title:', createdTodo.title);"
                    ],
                    "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                  }
                }
              ]
            },
            {
              "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
              "name": "📝 Create Medium Priority Todo",
              "request": {
                "description": {
                  "content": "Create a medium priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Medium priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                  }
                }
              ]
            },
            {
              "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
              "name": "📚 Create Low Priority Todo",
              "request": {
                "description": {
                  "content": "Create a low priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Low priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                  }
                }
              ]
            },
            {
              "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
              "name": "✅ Create Completed Todo",
              "request": {
                "description": {
                  "content": "Create a todo that is already marked as completed",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Completed Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Completed Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('completedTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Completed todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                  }
                }
              ]
            },
            {
              "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
              "name": "🔤 Create Todo with Special Characters",
              "request": {
                "description": {
                  "content": "Create a todo with special characters and Unicode to test character encoding",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Special characters todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e2de34f9-d299-4647-8b72-0357e8a6efb9",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a5530785-9ffe-47ff-8afb-b38655f5dcc6",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "e5c59aa4-18e7-489b-b038-70675847456c",
          "timestamp": 1758587436233,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
          "name": "✅ Create Completed Todo",
          "request": {
            "description": {
              "content": "Create a todo that is already marked as completed",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Completed Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Completed Todo - Response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('completed', true);",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('completedTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Completed todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
              }
            }
          ]
        },
        "parent": {
          "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
          "name": "➕ CREATE Operations",
          "item": [
            {
              "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
              "name": "🚀 Create High Priority Todo",
              "request": {
                "description": {
                  "content": "Create a high priority todo item for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "// Store the created todo ID for later operations",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                      "",
                      "console.log('✅ High priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);",
                      "console.log('📋 Title:', createdTodo.title);"
                    ],
                    "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                  }
                }
              ]
            },
            {
              "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
              "name": "📝 Create Medium Priority Todo",
              "request": {
                "description": {
                  "content": "Create a medium priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Medium priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                  }
                }
              ]
            },
            {
              "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
              "name": "📚 Create Low Priority Todo",
              "request": {
                "description": {
                  "content": "Create a low priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Low priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                  }
                }
              ]
            },
            {
              "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
              "name": "✅ Create Completed Todo",
              "request": {
                "description": {
                  "content": "Create a todo that is already marked as completed",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Completed Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Completed Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('completedTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Completed todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                  }
                }
              ]
            },
            {
              "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
              "name": "🔤 Create Todo with Special Characters",
              "request": {
                "description": {
                  "content": "Create a todo with special characters and Unicode to test character encoding",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Special characters todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bcd05b1d-0777-4c3a-bfd2-665c61f31b9d",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20664b3d-2c9e-49a7-bdfe-083b9072b56f",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "d797f7ec-00d3-4315-892a-df74575b3203",
          "timestamp": 1758587436295,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
          "name": "🔤 Create Todo with Special Characters",
          "request": {
            "description": {
              "content": "Create a todo with special characters and Unicode to test character encoding",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                  "});",
                  "",
                  "// Store the created todo ID",
                  "const createdTodo = pm.response.json().data;",
                  "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                  "",
                  "// Update created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "createdTodos.push(createdTodo._id);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Special characters todo created successfully');",
                  "console.log('💾 Stored todo ID:', createdTodo._id);"
                ],
                "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
              }
            }
          ]
        },
        "parent": {
          "id": "2fe1e992-0d18-42e9-b765-8f71b13e07de",
          "name": "➕ CREATE Operations",
          "item": [
            {
              "id": "a1e82603-b44b-456a-858a-bdbf79d64829",
              "name": "🚀 Create High Priority Todo",
              "request": {
                "description": {
                  "content": "Create a high priority todo item for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🚨 Urgent: Complete Postman API Testing\",\n    \"description\": \"Set up comprehensive API testing using Postman collection with all CRUD operations. This is a high priority task that needs immediate attention for quality assurance.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40cb2a4-28d2-4931-aefd-a25da523dc50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create High Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create High Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('data');",
                      "    pm.expect(responseJson.data).to.have.property('_id');",
                      "    pm.expect(responseJson.data).to.have.property('title');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "// Store the created todo ID for later operations",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('highPriorityTodoId', createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify([createdTodo._id]));",
                      "",
                      "console.log('✅ High priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);",
                      "console.log('📋 Title:', createdTodo.title);"
                    ],
                    "_lastExecutionId": "de84f7a0-a09a-4ec9-b86d-2d0d715e9285"
                  }
                }
              ]
            },
            {
              "id": "3775f113-28cc-4c9d-b47a-49f214576e9c",
              "name": "📝 Create Medium Priority Todo",
              "request": {
                "description": {
                  "content": "Create a medium priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"📊 Implement API Documentation\",\n    \"description\": \"Create comprehensive API documentation with examples, request/response formats, and error codes. This will help other developers understand and use the API effectively.\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4cdd1687-7dcf-430a-b5a5-12ecbba9fd8e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Medium Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Medium Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('mediumPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Medium priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "2b688e4e-2214-4c6e-973d-ec23793a60ea"
                  }
                }
              ]
            },
            {
              "id": "f5041f25-5173-46e5-bfff-fed6c19492cf",
              "name": "📚 Create Low Priority Todo",
              "request": {
                "description": {
                  "content": "Create a low priority todo item",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🎨 Improve UI/UX Design\",\n    \"description\": \"Enhance the user interface with better colors, typography, and layout. Add animations and improve overall user experience when time permits.\",\n    \"priority\": \"low\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1641002-d864-4944-9e4f-6ee3e3edf813",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Low Priority Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Low Priority Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'low');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('lowPriorityTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Low priority todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "49eee6f6-5d39-442d-94e5-4fda33082ee9"
                  }
                }
              ]
            },
            {
              "id": "54644738-9a3e-4ef4-a132-b0268fa54574",
              "name": "✅ Create Completed Todo",
              "request": {
                "description": {
                  "content": "Create a todo that is already marked as completed",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"✅ Setup Development Environment\",\n    \"description\": \"Initialize project structure, install dependencies, configure database, and set up basic API endpoints. This task has been completed successfully.\",\n    \"priority\": \"high\",\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbb666ed-0d23-4f26-92bf-b89080d21333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Completed Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Completed Todo - Response structure is correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('completedTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Completed todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "ba68351b-313d-4f0d-bc39-907ec0a24c1c"
                  }
                }
              ]
            },
            {
              "id": "8a790f2d-2870-4e40-8b78-49fe4ce9e98b",
              "name": "🔤 Create Todo with Special Characters",
              "request": {
                "description": {
                  "content": "Create a todo with special characters and Unicode to test character encoding",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🌍 Special Characters & Unicode Test: !@#$%^&*()[]{}|;':,.<>?\",\n    \"description\": \"Testing special characters, Unicode symbols, and emojis: 你好 мир العالم 🚀📋✅🎯. This includes various punctuation: !@#$%^&*()[]{}|;':,.<>? and mathematical symbols: ∑∏∫√∞≠≤≥±×÷\",\n    \"priority\": \"medium\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "407c2fec-6310-42a6-8d17-dce9f22e590f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Create Special Characters Todo - Status Code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Create Special Characters Todo - Handles special characters', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data.title).to.include('Special Characters & Unicode Test');",
                      "});",
                      "",
                      "// Store the created todo ID",
                      "const createdTodo = pm.response.json().data;",
                      "pm.environment.set('specialCharsTodoId', createdTodo._id);",
                      "",
                      "// Update created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "createdTodos.push(createdTodo._id);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Special characters todo created successfully');",
                      "console.log('💾 Stored todo ID:', createdTodo._id);"
                    ],
                    "_lastExecutionId": "bb6d5df0-f3fe-4640-92f1-60186acc42d2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "92d654ad-5da7-456a-b9ec-b0309121b58c",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "45624f35-1a36-431b-a564-d479cf95fa43",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "af45b658-ce0a-4175-b475-35ce658d0686",
          "timestamp": 1758587436364,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
          "name": "📋 Get All Todos (After Creation)",
          "request": {
            "description": {
              "content": "Verify that all created todos are now present in the system",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                  "});",
                  "",
                  "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                  "    ",
                  "    createdTodos.forEach(todoId => {",
                  "        pm.expect(returnedTodoIds).to.include(todoId);",
                  "    });",
                  "});",
                  "",
                  "console.log('✅ All todos retrieved successfully after creation');",
                  "console.log('📊 Total todos now:', pm.response.json().count);"
                ],
                "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
              }
            }
          ]
        },
        "parent": {
          "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
          "name": "📚 READ Operations (After Creation)",
          "item": [
            {
              "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
              "name": "📋 Get All Todos (After Creation)",
              "request": {
                "description": {
                  "content": "Verify that all created todos are now present in the system",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                      "    ",
                      "    createdTodos.forEach(todoId => {",
                      "        pm.expect(returnedTodoIds).to.include(todoId);",
                      "    });",
                      "});",
                      "",
                      "console.log('✅ All todos retrieved successfully after creation');",
                      "console.log('📊 Total todos now:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                  }
                }
              ]
            },
            {
              "id": "09424bfb-91b1-490b-b845-73c0d732667c",
              "name": "🔍 Get Single Created Todo",
              "request": {
                "description": {
                  "content": "Get a specific todo that was created in the previous step",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                      "    pm.expect(responseJson.data.priority).to.equal('high');",
                      "    pm.expect(responseJson.data.title).to.include('Urgent');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieved successfully');"
                    ],
                    "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                  }
                }
              ]
            },
            {
              "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
              "name": "🔍 Filter Todos by Priority (High)",
              "request": {
                "description": {
                  "content": "Filter todos to only show high priority items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "priority",
                      "value": "high"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.priority).to.equal('high');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ High priority filter working correctly');",
                      "console.log('📊 High priority todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                  }
                }
              ]
            },
            {
              "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
              "name": "✅ Filter Completed Todos",
              "request": {
                "description": {
                  "content": "Filter todos to only show completed items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "completed",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Only completed returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.completed).to.equal(true);",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const completedId = pm.environment.get('completedTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ Completed filter working correctly');",
                      "console.log('📊 Completed todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                  }
                }
              ]
            },
            {
              "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
              "name": "📅 Sort Todos by Creation Date",
              "request": {
                "description": {
                  "content": "Get todos sorted by creation date (newest first)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sort",
                      "value": "-createdAt"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Sort Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Sort Todos - Sorted by creation date', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    if (responseJson.data.length > 1) {",
                      "        for (let i = 1; i < responseJson.data.length; i++) {",
                      "            const currentDate = new Date(responseJson.data[i].createdAt);",
                      "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                      "            pm.expect(currentDate).to.be.at.most(previousDate);",
                      "        }",
                      "    }",
                      "});",
                      "",
                      "console.log('✅ Sorting by creation date working correctly');"
                    ],
                    "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "56bfd107-2aed-4681-a381-98d6325520aa",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "44b958aa-619e-44ca-aba5-27001f6485d1",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "c2305d1a-1c45-464b-b06f-a2bebbdde2b1",
          "timestamp": 1758587436430,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "09424bfb-91b1-490b-b845-73c0d732667c",
          "name": "🔍 Get Single Created Todo",
          "request": {
            "description": {
              "content": "Get a specific todo that was created in the previous step",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{highPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const expectedId = pm.environment.get('highPriorityTodoId');",
                  "    ",
                  "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                  "    pm.expect(responseJson.data.priority).to.equal('high');",
                  "    pm.expect(responseJson.data.title).to.include('Urgent');",
                  "});",
                  "",
                  "console.log('✅ Single todo retrieved successfully');"
                ],
                "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
              }
            }
          ]
        },
        "parent": {
          "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
          "name": "📚 READ Operations (After Creation)",
          "item": [
            {
              "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
              "name": "📋 Get All Todos (After Creation)",
              "request": {
                "description": {
                  "content": "Verify that all created todos are now present in the system",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                      "    ",
                      "    createdTodos.forEach(todoId => {",
                      "        pm.expect(returnedTodoIds).to.include(todoId);",
                      "    });",
                      "});",
                      "",
                      "console.log('✅ All todos retrieved successfully after creation');",
                      "console.log('📊 Total todos now:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                  }
                }
              ]
            },
            {
              "id": "09424bfb-91b1-490b-b845-73c0d732667c",
              "name": "🔍 Get Single Created Todo",
              "request": {
                "description": {
                  "content": "Get a specific todo that was created in the previous step",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                      "    pm.expect(responseJson.data.priority).to.equal('high');",
                      "    pm.expect(responseJson.data.title).to.include('Urgent');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieved successfully');"
                    ],
                    "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                  }
                }
              ]
            },
            {
              "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
              "name": "🔍 Filter Todos by Priority (High)",
              "request": {
                "description": {
                  "content": "Filter todos to only show high priority items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "priority",
                      "value": "high"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.priority).to.equal('high');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ High priority filter working correctly');",
                      "console.log('📊 High priority todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                  }
                }
              ]
            },
            {
              "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
              "name": "✅ Filter Completed Todos",
              "request": {
                "description": {
                  "content": "Filter todos to only show completed items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "completed",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Only completed returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.completed).to.equal(true);",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const completedId = pm.environment.get('completedTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ Completed filter working correctly');",
                      "console.log('📊 Completed todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                  }
                }
              ]
            },
            {
              "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
              "name": "📅 Sort Todos by Creation Date",
              "request": {
                "description": {
                  "content": "Get todos sorted by creation date (newest first)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sort",
                      "value": "-createdAt"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Sort Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Sort Todos - Sorted by creation date', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    if (responseJson.data.length > 1) {",
                      "        for (let i = 1; i < responseJson.data.length; i++) {",
                      "            const currentDate = new Date(responseJson.data[i].createdAt);",
                      "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                      "            pm.expect(currentDate).to.be.at.most(previousDate);",
                      "        }",
                      "    }",
                      "});",
                      "",
                      "console.log('✅ Sorting by creation date working correctly');"
                    ],
                    "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3ff7694c-4d46-43c2-a8aa-ee474cfeb8af",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c7995084-c385-44fd-a72d-c22ec8a4287f",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ec0fef7c-3fbe-4717-acb3-678f514d63c9",
          "timestamp": 1758587436486,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
          "name": "🔍 Filter Todos by Priority (High)",
          "request": {
            "description": {
              "content": "Filter todos to only show high priority items",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "priority",
                  "value": "high"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.data.forEach(todo => {",
                  "        pm.expect(todo.priority).to.equal('high');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                  "    ",
                  "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                  "    pm.expect(foundTodo).to.not.be.undefined;",
                  "});",
                  "",
                  "console.log('✅ High priority filter working correctly');",
                  "console.log('📊 High priority todos found:', pm.response.json().count);"
                ],
                "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
              }
            }
          ]
        },
        "parent": {
          "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
          "name": "📚 READ Operations (After Creation)",
          "item": [
            {
              "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
              "name": "📋 Get All Todos (After Creation)",
              "request": {
                "description": {
                  "content": "Verify that all created todos are now present in the system",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                      "    ",
                      "    createdTodos.forEach(todoId => {",
                      "        pm.expect(returnedTodoIds).to.include(todoId);",
                      "    });",
                      "});",
                      "",
                      "console.log('✅ All todos retrieved successfully after creation');",
                      "console.log('📊 Total todos now:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                  }
                }
              ]
            },
            {
              "id": "09424bfb-91b1-490b-b845-73c0d732667c",
              "name": "🔍 Get Single Created Todo",
              "request": {
                "description": {
                  "content": "Get a specific todo that was created in the previous step",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                      "    pm.expect(responseJson.data.priority).to.equal('high');",
                      "    pm.expect(responseJson.data.title).to.include('Urgent');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieved successfully');"
                    ],
                    "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                  }
                }
              ]
            },
            {
              "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
              "name": "🔍 Filter Todos by Priority (High)",
              "request": {
                "description": {
                  "content": "Filter todos to only show high priority items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "priority",
                      "value": "high"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.priority).to.equal('high');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ High priority filter working correctly');",
                      "console.log('📊 High priority todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                  }
                }
              ]
            },
            {
              "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
              "name": "✅ Filter Completed Todos",
              "request": {
                "description": {
                  "content": "Filter todos to only show completed items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "completed",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Only completed returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.completed).to.equal(true);",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const completedId = pm.environment.get('completedTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ Completed filter working correctly');",
                      "console.log('📊 Completed todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                  }
                }
              ]
            },
            {
              "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
              "name": "📅 Sort Todos by Creation Date",
              "request": {
                "description": {
                  "content": "Get todos sorted by creation date (newest first)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sort",
                      "value": "-createdAt"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Sort Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Sort Todos - Sorted by creation date', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    if (responseJson.data.length > 1) {",
                      "        for (let i = 1; i < responseJson.data.length; i++) {",
                      "            const currentDate = new Date(responseJson.data[i].createdAt);",
                      "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                      "            pm.expect(currentDate).to.be.at.most(previousDate);",
                      "        }",
                      "    }",
                      "});",
                      "",
                      "console.log('✅ Sorting by creation date working correctly');"
                    ],
                    "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca6908bb-7684-441b-8603-19ef87382242",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "48c78773-5f57-4d34-81fe-7bf4f39497bb",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "795e4e6e-7d88-4c9e-951f-c409d5b64468",
          "timestamp": 1758587436531,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
          "name": "✅ Filter Completed Todos",
          "request": {
            "description": {
              "content": "Filter todos to only show completed items",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "completed",
                  "value": "true"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filter Completed Todos - Only completed returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    responseJson.data.forEach(todo => {",
                  "        pm.expect(todo.completed).to.equal(true);",
                  "    });",
                  "});",
                  "",
                  "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const completedId = pm.environment.get('completedTodoId');",
                  "    ",
                  "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                  "    pm.expect(foundTodo).to.not.be.undefined;",
                  "});",
                  "",
                  "console.log('✅ Completed filter working correctly');",
                  "console.log('📊 Completed todos found:', pm.response.json().count);"
                ],
                "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
              }
            }
          ]
        },
        "parent": {
          "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
          "name": "📚 READ Operations (After Creation)",
          "item": [
            {
              "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
              "name": "📋 Get All Todos (After Creation)",
              "request": {
                "description": {
                  "content": "Verify that all created todos are now present in the system",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                      "    ",
                      "    createdTodos.forEach(todoId => {",
                      "        pm.expect(returnedTodoIds).to.include(todoId);",
                      "    });",
                      "});",
                      "",
                      "console.log('✅ All todos retrieved successfully after creation');",
                      "console.log('📊 Total todos now:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                  }
                }
              ]
            },
            {
              "id": "09424bfb-91b1-490b-b845-73c0d732667c",
              "name": "🔍 Get Single Created Todo",
              "request": {
                "description": {
                  "content": "Get a specific todo that was created in the previous step",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                      "    pm.expect(responseJson.data.priority).to.equal('high');",
                      "    pm.expect(responseJson.data.title).to.include('Urgent');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieved successfully');"
                    ],
                    "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                  }
                }
              ]
            },
            {
              "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
              "name": "🔍 Filter Todos by Priority (High)",
              "request": {
                "description": {
                  "content": "Filter todos to only show high priority items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "priority",
                      "value": "high"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.priority).to.equal('high');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ High priority filter working correctly');",
                      "console.log('📊 High priority todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                  }
                }
              ]
            },
            {
              "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
              "name": "✅ Filter Completed Todos",
              "request": {
                "description": {
                  "content": "Filter todos to only show completed items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "completed",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Only completed returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.completed).to.equal(true);",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const completedId = pm.environment.get('completedTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ Completed filter working correctly');",
                      "console.log('📊 Completed todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                  }
                }
              ]
            },
            {
              "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
              "name": "📅 Sort Todos by Creation Date",
              "request": {
                "description": {
                  "content": "Get todos sorted by creation date (newest first)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sort",
                      "value": "-createdAt"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Sort Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Sort Todos - Sorted by creation date', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    if (responseJson.data.length > 1) {",
                      "        for (let i = 1; i < responseJson.data.length; i++) {",
                      "            const currentDate = new Date(responseJson.data[i].createdAt);",
                      "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                      "            pm.expect(currentDate).to.be.at.most(previousDate);",
                      "        }",
                      "    }",
                      "});",
                      "",
                      "console.log('✅ Sorting by creation date working correctly');"
                    ],
                    "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a7a78d0a-78ff-44e5-876b-85aaa02e5876",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "32ef4b4c-5633-406d-b5a9-061c081b20c5",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "45086992-6895-4f8b-9bed-384c0c85b268",
          "timestamp": 1758587436560,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
          "name": "📅 Sort Todos by Creation Date",
          "request": {
            "description": {
              "content": "Get todos sorted by creation date (newest first)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "-createdAt"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Sort Todos - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sort Todos - Sorted by creation date', function () {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    if (responseJson.data.length > 1) {",
                  "        for (let i = 1; i < responseJson.data.length; i++) {",
                  "            const currentDate = new Date(responseJson.data[i].createdAt);",
                  "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                  "            pm.expect(currentDate).to.be.at.most(previousDate);",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "console.log('✅ Sorting by creation date working correctly');"
                ],
                "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
              }
            }
          ]
        },
        "parent": {
          "id": "d7dc8c7d-3560-46a1-b9f0-471b35f62d6b",
          "name": "📚 READ Operations (After Creation)",
          "item": [
            {
              "id": "fca84f73-2db1-4a03-ab85-b427c28e27be",
              "name": "📋 Get All Todos (After Creation)",
              "request": {
                "description": {
                  "content": "Verify that all created todos are now present in the system",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9583839-1148-4392-a6c3-5b93a0ee6758",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get All Todos After Creation - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Todo count increased', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const existingCount = parseInt(pm.environment.get('existingTodosCount') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.count).to.equal(existingCount + createdTodos.length);",
                      "});",
                      "",
                      "pm.test('Get All Todos After Creation - Contains created todos', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    const returnedTodoIds = responseJson.data.map(todo => todo._id);",
                      "    ",
                      "    createdTodos.forEach(todoId => {",
                      "        pm.expect(returnedTodoIds).to.include(todoId);",
                      "    });",
                      "});",
                      "",
                      "console.log('✅ All todos retrieved successfully after creation');",
                      "console.log('📊 Total todos now:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "0db507bb-d3f8-4162-90a2-0f2eac01f221"
                  }
                }
              ]
            },
            {
              "id": "09424bfb-91b1-490b-b845-73c0d732667c",
              "name": "🔍 Get Single Created Todo",
              "request": {
                "description": {
                  "content": "Get a specific todo that was created in the previous step",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3471107d-c74f-47ac-95bc-fa2902f1776e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get Single Created Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Get Single Created Todo - Correct todo returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const expectedId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    pm.expect(responseJson.data._id).to.equal(expectedId);",
                      "    pm.expect(responseJson.data.priority).to.equal('high');",
                      "    pm.expect(responseJson.data.title).to.include('Urgent');",
                      "});",
                      "",
                      "console.log('✅ Single todo retrieved successfully');"
                    ],
                    "_lastExecutionId": "c3586a11-a925-4877-b100-a109c5a802cb"
                  }
                }
              ]
            },
            {
              "id": "bd302740-1e67-45ac-bed2-7ddde355f520",
              "name": "🔍 Filter Todos by Priority (High)",
              "request": {
                "description": {
                  "content": "Filter todos to only show high priority items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "priority",
                      "value": "high"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32291876-471a-4cf1-bfba-dd39b16da208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter High Priority Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Only high priority returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.priority).to.equal('high');",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter High Priority Todos - Contains our created high priority todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const highPriorityId = pm.environment.get('highPriorityTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === highPriorityId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ High priority filter working correctly');",
                      "console.log('📊 High priority todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "97f5c882-f280-4a98-8605-38f2ad8fdf77"
                  }
                }
              ]
            },
            {
              "id": "f1972ec7-9fa7-420f-bac9-42e2bd497f27",
              "name": "✅ Filter Completed Todos",
              "request": {
                "description": {
                  "content": "Filter todos to only show completed items",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "completed",
                      "value": "true"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38fb3916-d000-45a2-aeaf-6f318c3d1f12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Filter Completed Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Only completed returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    responseJson.data.forEach(todo => {",
                      "        pm.expect(todo.completed).to.equal(true);",
                      "    });",
                      "});",
                      "",
                      "pm.test('Filter Completed Todos - Contains our completed todo', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const completedId = pm.environment.get('completedTodoId');",
                      "    ",
                      "    const foundTodo = responseJson.data.find(todo => todo._id === completedId);",
                      "    pm.expect(foundTodo).to.not.be.undefined;",
                      "});",
                      "",
                      "console.log('✅ Completed filter working correctly');",
                      "console.log('📊 Completed todos found:', pm.response.json().count);"
                    ],
                    "_lastExecutionId": "25fe082c-4d3b-471a-baeb-bbfac1be247a"
                  }
                }
              ]
            },
            {
              "id": "a9cc9ff9-6f8b-4729-b5fd-30c519ba7ccd",
              "name": "📅 Sort Todos by Creation Date",
              "request": {
                "description": {
                  "content": "Get todos sorted by creation date (newest first)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sort",
                      "value": "-createdAt"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4e784c3-590d-4bd2-8374-59ac0a79ff03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Sort Todos - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Sort Todos - Sorted by creation date', function () {",
                      "    const responseJson = pm.response.json();",
                      "    ",
                      "    if (responseJson.data.length > 1) {",
                      "        for (let i = 1; i < responseJson.data.length; i++) {",
                      "            const currentDate = new Date(responseJson.data[i].createdAt);",
                      "            const previousDate = new Date(responseJson.data[i-1].createdAt);",
                      "            pm.expect(currentDate).to.be.at.most(previousDate);",
                      "        }",
                      "    }",
                      "});",
                      "",
                      "console.log('✅ Sorting by creation date working correctly');"
                    ],
                    "_lastExecutionId": "bb3f22ca-754c-41b3-a7c1-0744c64891be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7cb6ae49-9ea3-48f3-9a76-d2e6a413ffcc",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9e3154cc-a69c-48c0-a51b-03f4131e2b24",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "d5a15654-c625-4bb4-a7a0-1dec80e4c005",
          "timestamp": 1758587436590,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
          "name": "📝 Update Todo Title and Description",
          "request": {
            "description": {
              "content": "Update the title and description of an existing todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{mediumPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                  "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                  "});",
                  "",
                  "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                  "    // updatedAt should be different from createdAt",
                  "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                  "});",
                  "",
                  "console.log('✅ Todo title and description updated successfully');"
                ],
                "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
              }
            }
          ]
        },
        "parent": {
          "id": "01da8ef3-4a93-4352-9717-3f783d0f891a",
          "name": "✏️ UPDATE Operations",
          "item": [
            {
              "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
              "name": "📝 Update Todo Title and Description",
              "request": {
                "description": {
                  "content": "Update the title and description of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{mediumPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                      "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                      "    // updatedAt should be different from createdAt",
                      "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                      "});",
                      "",
                      "console.log('✅ Todo title and description updated successfully');"
                    ],
                    "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
                  }
                }
              ]
            },
            {
              "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
              "name": "✅ Mark Todo as Completed",
              "request": {
                "description": {
                  "content": "Mark a todo as completed by updating the completed field",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{lowPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Mark Todo Completed - Completion status updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "console.log('✅ Todo marked as completed successfully');"
                    ],
                    "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
                  }
                }
              ]
            },
            {
              "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
              "name": "🔄 Change Todo Priority",
              "request": {
                "description": {
                  "content": "Change the priority level of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"priority\": \"medium\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Change Todo Priority - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "console.log('✅ Todo priority changed successfully');"
                    ],
                    "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
                  }
                }
              ]
            },
            {
              "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
              "name": "🔄 Update Multiple Fields",
              "request": {
                "description": {
                  "content": "Update multiple fields of a todo in a single request",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Multiple Fields - All fields updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "console.log('✅ Multiple fields updated successfully');"
                    ],
                    "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "52b92b34-0481-4b57-881d-35a1ddd818c5",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6255882-d9dc-4991-b06e-a02d1fac60b7",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "381a59d1-4e3c-4b09-95ed-dd435aebee65",
          "timestamp": 1758587436621,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
          "name": "✅ Mark Todo as Completed",
          "request": {
            "description": {
              "content": "Mark a todo as completed by updating the completed field",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{lowPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"completed\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Mark Todo Completed - Completion status updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('completed', true);",
                  "});",
                  "",
                  "console.log('✅ Todo marked as completed successfully');"
                ],
                "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
              }
            }
          ]
        },
        "parent": {
          "id": "01da8ef3-4a93-4352-9717-3f783d0f891a",
          "name": "✏️ UPDATE Operations",
          "item": [
            {
              "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
              "name": "📝 Update Todo Title and Description",
              "request": {
                "description": {
                  "content": "Update the title and description of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{mediumPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                      "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                      "    // updatedAt should be different from createdAt",
                      "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                      "});",
                      "",
                      "console.log('✅ Todo title and description updated successfully');"
                    ],
                    "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
                  }
                }
              ]
            },
            {
              "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
              "name": "✅ Mark Todo as Completed",
              "request": {
                "description": {
                  "content": "Mark a todo as completed by updating the completed field",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{lowPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Mark Todo Completed - Completion status updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "console.log('✅ Todo marked as completed successfully');"
                    ],
                    "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
                  }
                }
              ]
            },
            {
              "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
              "name": "🔄 Change Todo Priority",
              "request": {
                "description": {
                  "content": "Change the priority level of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"priority\": \"medium\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Change Todo Priority - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "console.log('✅ Todo priority changed successfully');"
                    ],
                    "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
                  }
                }
              ]
            },
            {
              "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
              "name": "🔄 Update Multiple Fields",
              "request": {
                "description": {
                  "content": "Update multiple fields of a todo in a single request",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Multiple Fields - All fields updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "console.log('✅ Multiple fields updated successfully');"
                    ],
                    "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1a729d3c-9558-4ab0-b3f3-bdf4f0f9d2ab",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fb7ecc75-643a-4ec2-a0e8-7959c43c8ba1",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "b5ec32cc-d592-4524-a124-3164135ecff4",
          "timestamp": 1758587436645,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
          "name": "🔄 Change Todo Priority",
          "request": {
            "description": {
              "content": "Change the priority level of an existing todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{highPriorityTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"priority\": \"medium\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Change Todo Priority - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                  "});",
                  "",
                  "console.log('✅ Todo priority changed successfully');"
                ],
                "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
              }
            }
          ]
        },
        "parent": {
          "id": "01da8ef3-4a93-4352-9717-3f783d0f891a",
          "name": "✏️ UPDATE Operations",
          "item": [
            {
              "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
              "name": "📝 Update Todo Title and Description",
              "request": {
                "description": {
                  "content": "Update the title and description of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{mediumPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                      "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                      "    // updatedAt should be different from createdAt",
                      "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                      "});",
                      "",
                      "console.log('✅ Todo title and description updated successfully');"
                    ],
                    "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
                  }
                }
              ]
            },
            {
              "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
              "name": "✅ Mark Todo as Completed",
              "request": {
                "description": {
                  "content": "Mark a todo as completed by updating the completed field",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{lowPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Mark Todo Completed - Completion status updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "console.log('✅ Todo marked as completed successfully');"
                    ],
                    "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
                  }
                }
              ]
            },
            {
              "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
              "name": "🔄 Change Todo Priority",
              "request": {
                "description": {
                  "content": "Change the priority level of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"priority\": \"medium\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Change Todo Priority - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "console.log('✅ Todo priority changed successfully');"
                    ],
                    "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
                  }
                }
              ]
            },
            {
              "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
              "name": "🔄 Update Multiple Fields",
              "request": {
                "description": {
                  "content": "Update multiple fields of a todo in a single request",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Multiple Fields - All fields updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "console.log('✅ Multiple fields updated successfully');"
                    ],
                    "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ae0a086c-1320-4058-a253-1af2091aca65",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32051ae8-ba0c-4834-9605-98889a5f2bcb",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "fc910739-b15c-4f1a-a032-81780ad610c0",
          "timestamp": 1758587436679,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
          "name": "🔄 Update Multiple Fields",
          "request": {
            "description": {
              "content": "Update multiple fields of a todo in a single request",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Update Multiple Fields - All fields updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                  "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                  "    pm.expect(responseJson.data).to.have.property('completed', false);",
                  "});",
                  "",
                  "console.log('✅ Multiple fields updated successfully');"
                ],
                "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
              }
            }
          ]
        },
        "parent": {
          "id": "01da8ef3-4a93-4352-9717-3f783d0f891a",
          "name": "✏️ UPDATE Operations",
          "item": [
            {
              "id": "1eaaac3a-e347-4d44-89b1-cd3dd3d23e77",
              "name": "📝 Update Todo Title and Description",
              "request": {
                "description": {
                  "content": "Update the title and description of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{mediumPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 UPDATED: Postman API Testing Complete\",\n    \"description\": \"This todo has been modified using Postman PUT request. The API testing framework has been successfully implemented and all endpoints are working correctly.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca98b9b6-f408-4cbf-a220-7c75587649a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Todo Title/Description - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - Response structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('UPDATED');",
                      "    pm.expect(responseJson.data).to.have.property('description').that.includes('modified');",
                      "});",
                      "",
                      "pm.test('Update Todo Title/Description - UpdatedAt timestamp changed', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                      "    // updatedAt should be different from createdAt",
                      "    pm.expect(responseJson.data.updatedAt).to.not.equal(responseJson.data.createdAt);",
                      "});",
                      "",
                      "console.log('✅ Todo title and description updated successfully');"
                    ],
                    "_lastExecutionId": "6b0fb82e-0c08-42f2-b51f-7b823e46cd8d"
                  }
                }
              ]
            },
            {
              "id": "444745dd-45ef-4ce9-802e-079bd79337fa",
              "name": "✅ Mark Todo as Completed",
              "request": {
                "description": {
                  "content": "Mark a todo as completed by updating the completed field",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{lowPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"completed\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "680af0ba-a60a-4317-a57e-f1d52cd9ecbe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Mark Todo Completed - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Mark Todo Completed - Completion status updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('completed', true);",
                      "});",
                      "",
                      "console.log('✅ Todo marked as completed successfully');"
                    ],
                    "_lastExecutionId": "71719d05-a0df-4bfd-b09b-b2ef69061041"
                  }
                }
              ]
            },
            {
              "id": "93d4f3a0-b0df-4a54-99fe-401936d1a78b",
              "name": "🔄 Change Todo Priority",
              "request": {
                "description": {
                  "content": "Change the priority level of an existing todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{highPriorityTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"priority\": \"medium\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44bc9c9d-d778-4aa9-8df0-6ad6b06905c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Change Todo Priority - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Change Todo Priority - Priority updated correctly', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'medium');",
                      "});",
                      "",
                      "console.log('✅ Todo priority changed successfully');"
                    ],
                    "_lastExecutionId": "3ab4b1be-70c2-48d5-baaa-25527ac05acf"
                  }
                }
              ]
            },
            {
              "id": "ad2c819a-e6da-4772-838c-16beaccc46a2",
              "name": "🔄 Update Multiple Fields",
              "request": {
                "description": {
                  "content": "Update multiple fields of a todo in a single request",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"🔄 Multi-Update: Special Characters Todo Enhanced\",\n    \"description\": \"This todo has been updated to test multiple field modifications simultaneously. Priority changed, completion reset, and content updated.\",\n    \"priority\": \"high\",\n    \"completed\": false\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f677a1d3-7ef1-4ec2-a9c9-73966de5a0d1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Multiple Fields - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Update Multiple Fields - All fields updated', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson.data).to.have.property('title').that.includes('Multi-Update');",
                      "    pm.expect(responseJson.data).to.have.property('priority', 'high');",
                      "    pm.expect(responseJson.data).to.have.property('completed', false);",
                      "});",
                      "",
                      "console.log('✅ Multiple fields updated successfully');"
                    ],
                    "_lastExecutionId": "e4343932-0e36-4985-9f58-fa81e42946ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a912e2d1-ef07-4349-adb7-37a52ee1c729",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6876d150-5035-4180-9783-bb1f2bb79b85",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "19e50750-29a1-45db-95a1-9ef93e6d5054",
          "timestamp": 1758587436721,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "29dd756e-e93b-4361-88ec-b35e63380c81",
          "name": "📈 Get Updated Todo Statistics",
          "request": {
            "description": {
              "content": "Get updated statistics after all CRUD operations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "133480fb-63ef-47b9-9b2d-89eb5dba8e99",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Updated Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated Stats - Statistics reflect changes', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                  "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "    ",
                  "    pm.expect(responseJson.data.total).to.equal(initialTotal + createdTodos.length);",
                  "    pm.expect(responseJson.data.completed).to.be.at.least(1); // At least one completed",
                  "    pm.expect(responseJson.data.pending).to.be.at.least(1); // At least one pending",
                  "});",
                  "",
                  "const stats = pm.response.json().data;",
                  "console.log('📊 Updated Statistics:');",
                  "console.log('   Total todos:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Statistics updated correctly after CRUD operations');"
                ],
                "_lastExecutionId": "16ae93cd-1f46-472d-970f-fe8df70e95a1"
              }
            }
          ]
        },
        "parent": {
          "id": "da9cdc02-306e-4336-96be-7725e1eda6a4",
          "name": "📊 Statistics (After Updates)",
          "item": [
            {
              "id": "29dd756e-e93b-4361-88ec-b35e63380c81",
              "name": "📈 Get Updated Todo Statistics",
              "request": {
                "description": {
                  "content": "Get updated statistics after all CRUD operations",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "133480fb-63ef-47b9-9b2d-89eb5dba8e99",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Updated Stats - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated Stats - Statistics reflect changes', function () {",
                      "    const responseJson = pm.response.json();",
                      "    const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                      "    const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "    ",
                      "    pm.expect(responseJson.data.total).to.equal(initialTotal + createdTodos.length);",
                      "    pm.expect(responseJson.data.completed).to.be.at.least(1); // At least one completed",
                      "    pm.expect(responseJson.data.pending).to.be.at.least(1); // At least one pending",
                      "});",
                      "",
                      "const stats = pm.response.json().data;",
                      "console.log('📊 Updated Statistics:');",
                      "console.log('   Total todos:', stats.total);",
                      "console.log('   Completed:', stats.completed);",
                      "console.log('   Pending:', stats.pending);",
                      "console.log('✅ Statistics updated correctly after CRUD operations');"
                    ],
                    "_lastExecutionId": "16ae93cd-1f46-472d-970f-fe8df70e95a1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b40b92a9-9a13-4b56-8896-934e5405c494",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e266d6df-ec80-4ced-acac-180403ebf118",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "3fe501af-9ff7-409f-9b88-56a1cebd2705",
          "timestamp": 1758587436747,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f0eeb758-f265-4193-b958-96db8ded6027",
          "name": "🗑️ Delete Single Todo",
          "request": {
            "description": {
              "content": "Delete a specific todo by ID",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6bff527f-6014-4968-aa8d-3badd9c99beb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete Todo - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delete Todo - Success message returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "// Remove from created todos list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const deletedId = pm.environment.get('specialCharsTodoId');",
                  "createdTodos = createdTodos.filter(id => id !== deletedId);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('✅ Todo deleted successfully');",
                  "console.log('🗑️ Deleted todo ID:', deletedId);"
                ],
                "_lastExecutionId": "8bbf863c-aafe-48ed-9cca-f3e8bbd86bee"
              }
            }
          ]
        },
        "parent": {
          "id": "7fc0b135-a5b9-44ec-a1d0-cf162453082f",
          "name": "🗑️ DELETE Operations",
          "item": [
            {
              "id": "f0eeb758-f265-4193-b958-96db8ded6027",
              "name": "🗑️ Delete Single Todo",
              "request": {
                "description": {
                  "content": "Delete a specific todo by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bff527f-6014-4968-aa8d-3badd9c99beb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Delete Todo - Success message returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});",
                      "",
                      "// Remove from created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const deletedId = pm.environment.get('specialCharsTodoId');",
                      "createdTodos = createdTodos.filter(id => id !== deletedId);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Todo deleted successfully');",
                      "console.log('🗑️ Deleted todo ID:', deletedId);"
                    ],
                    "_lastExecutionId": "8bbf863c-aafe-48ed-9cca-f3e8bbd86bee"
                  }
                }
              ]
            },
            {
              "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
              "name": "🔍 Verify Todo Deletion",
              "request": {
                "description": {
                  "content": "Try to get the deleted todo to verify it no longer exists",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "973639be-8841-40ea-9f68-6f431bdcb378",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Verify Deletion - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Verify Deletion - Error message for not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Deletion verified - todo no longer exists');"
                    ],
                    "_lastExecutionId": "e20367a9-0bab-490f-b362-bf322b2e623d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "87adce9d-9228-4eb5-9eb4-00759b930107",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "727a30cf-b589-4020-bcd8-257213cd2059",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "5c11fdb9-1e36-442a-9e80-d5bbdf120c2f",
          "timestamp": 1758587436792,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
          "name": "🔍 Verify Todo Deletion",
          "request": {
            "description": {
              "content": "Try to get the deleted todo to verify it no longer exists",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{specialCharsTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "973639be-8841-40ea-9f68-6f431bdcb378",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Verify Deletion - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Verify Deletion - Error message for not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Deletion verified - todo no longer exists');"
                ],
                "_lastExecutionId": "e20367a9-0bab-490f-b362-bf322b2e623d"
              }
            }
          ]
        },
        "parent": {
          "id": "7fc0b135-a5b9-44ec-a1d0-cf162453082f",
          "name": "🗑️ DELETE Operations",
          "item": [
            {
              "id": "f0eeb758-f265-4193-b958-96db8ded6027",
              "name": "🗑️ Delete Single Todo",
              "request": {
                "description": {
                  "content": "Delete a specific todo by ID",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bff527f-6014-4968-aa8d-3badd9c99beb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Todo - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Delete Todo - Success message returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', true);",
                      "    pm.expect(responseJson).to.have.property('message');",
                      "});",
                      "",
                      "// Remove from created todos list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const deletedId = pm.environment.get('specialCharsTodoId');",
                      "createdTodos = createdTodos.filter(id => id !== deletedId);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('✅ Todo deleted successfully');",
                      "console.log('🗑️ Deleted todo ID:', deletedId);"
                    ],
                    "_lastExecutionId": "8bbf863c-aafe-48ed-9cca-f3e8bbd86bee"
                  }
                }
              ]
            },
            {
              "id": "460069d7-da14-46ee-85c4-75c90ed9f781",
              "name": "🔍 Verify Todo Deletion",
              "request": {
                "description": {
                  "content": "Try to get the deleted todo to verify it no longer exists",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{specialCharsTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "973639be-8841-40ea-9f68-6f431bdcb378",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Verify Deletion - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Verify Deletion - Error message for not found', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Deletion verified - todo no longer exists');"
                    ],
                    "_lastExecutionId": "e20367a9-0bab-490f-b362-bf322b2e623d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e5f0ed43-8b72-4e9d-bc89-76b972a0f1f3",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f20fe201-1f6c-41dd-a8c2-044f7b7a5bc8",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "8c9a6c13-0c15-49a6-bb52-3dd002f822e0",
          "timestamp": 1758587436832,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
          "name": "❌ Get Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to get a todo that doesn't exist",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439011"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Non-Existent Todo - Error structure correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Error handling for non-existent todo works correctly');"
                ],
                "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
              }
            }
          ]
        },
        "parent": {
          "id": "b0009e3d-4cd4-4bc2-8d74-366166088cf4",
          "name": "❌ Error Handling Tests",
          "item": [
            {
              "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
              "name": "❌ Get Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to get a todo that doesn't exist",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439011"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Non-Existent Todo - Error structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Error handling for non-existent todo works correctly');"
                    ],
                    "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
                  }
                }
              ]
            },
            {
              "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
              "name": "❌ Create Todo with Invalid Data",
              "request": {
                "description": {
                  "content": "Test validation by trying to create a todo with invalid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Invalid Todo Data - Validation error returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Validation error handling works correctly');"
                    ],
                    "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
                  }
                }
              ]
            },
            {
              "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
              "name": "❌ Update Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to update a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439012"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"This update should fail\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Update Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Update error handling works correctly');"
                    ],
                    "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
                  }
                }
              ]
            },
            {
              "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
              "name": "❌ Delete Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to delete a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439013"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Delete Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Delete error handling works correctly');"
                    ],
                    "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4b2815bd-e9eb-4226-83f1-27a5ec3a3e4f",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "27a683da-d87f-4760-b20f-f2bf7dc393bc",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "355d0c82-4518-4e43-809a-10010672aa5a",
          "timestamp": 1758587436869,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
          "name": "❌ Create Todo with Invalid Data",
          "request": {
            "description": {
              "content": "Test validation by trying to create a todo with invalid data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid Todo Data - Validation error returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Validation error handling works correctly');"
                ],
                "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
              }
            }
          ]
        },
        "parent": {
          "id": "b0009e3d-4cd4-4bc2-8d74-366166088cf4",
          "name": "❌ Error Handling Tests",
          "item": [
            {
              "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
              "name": "❌ Get Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to get a todo that doesn't exist",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439011"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Non-Existent Todo - Error structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Error handling for non-existent todo works correctly');"
                    ],
                    "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
                  }
                }
              ]
            },
            {
              "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
              "name": "❌ Create Todo with Invalid Data",
              "request": {
                "description": {
                  "content": "Test validation by trying to create a todo with invalid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Invalid Todo Data - Validation error returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Validation error handling works correctly');"
                    ],
                    "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
                  }
                }
              ]
            },
            {
              "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
              "name": "❌ Update Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to update a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439012"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"This update should fail\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Update Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Update error handling works correctly');"
                    ],
                    "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
                  }
                }
              ]
            },
            {
              "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
              "name": "❌ Delete Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to delete a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439013"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Delete Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Delete error handling works correctly');"
                    ],
                    "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "94eee0c5-1ceb-46a5-bb22-a1c7b6aaa56a",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3804055e-ee65-4d68-b303-941e3b15fee8",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "63e88fe6-8685-47a5-816e-540e0b96a3c1",
          "timestamp": 1758587436901,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
          "name": "❌ Update Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to update a non-existent todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439012"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"This update should fail\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Update Non-Existent - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Update Non-Existent - Error message correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Update error handling works correctly');"
                ],
                "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
              }
            }
          ]
        },
        "parent": {
          "id": "b0009e3d-4cd4-4bc2-8d74-366166088cf4",
          "name": "❌ Error Handling Tests",
          "item": [
            {
              "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
              "name": "❌ Get Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to get a todo that doesn't exist",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439011"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Non-Existent Todo - Error structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Error handling for non-existent todo works correctly');"
                    ],
                    "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
                  }
                }
              ]
            },
            {
              "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
              "name": "❌ Create Todo with Invalid Data",
              "request": {
                "description": {
                  "content": "Test validation by trying to create a todo with invalid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Invalid Todo Data - Validation error returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Validation error handling works correctly');"
                    ],
                    "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
                  }
                }
              ]
            },
            {
              "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
              "name": "❌ Update Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to update a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439012"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"This update should fail\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Update Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Update error handling works correctly');"
                    ],
                    "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
                  }
                }
              ]
            },
            {
              "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
              "name": "❌ Delete Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to delete a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439013"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Delete Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Delete error handling works correctly');"
                    ],
                    "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fcfc24c0-25d1-4e85-b3e3-8ec06bfae8d6",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7fd88a26-cf41-4b47-a713-a8991a3724df",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "e9b7db6e-51a1-4f82-8db9-d6d9b917b20e",
          "timestamp": 1758587436924,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
          "name": "❌ Delete Non-Existent Todo",
          "request": {
            "description": {
              "content": "Test error handling when trying to delete a non-existent todo",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "507f1f77bcf86cd799439013"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Delete Non-Existent - Error message correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "console.log('✅ Delete error handling works correctly');"
                ],
                "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
              }
            }
          ]
        },
        "parent": {
          "id": "b0009e3d-4cd4-4bc2-8d74-366166088cf4",
          "name": "❌ Error Handling Tests",
          "item": [
            {
              "id": "81c6a800-8341-4d88-8fd5-1e38e46cac97",
              "name": "❌ Get Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to get a todo that doesn't exist",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439011"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3825944-b4d7-40da-83e9-8447de028efd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-Existent Todo - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Non-Existent Todo - Error structure correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Error handling for non-existent todo works correctly');"
                    ],
                    "_lastExecutionId": "bca4cd76-147f-4b0d-9062-3296ae22de55"
                  }
                }
              ]
            },
            {
              "id": "575318f5-2ec2-4bdc-8f61-5da870942904",
              "name": "❌ Create Todo with Invalid Data",
              "request": {
                "description": {
                  "content": "Test validation by trying to create a todo with invalid data",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"description\": \"Todo without title should fail\",\n    \"priority\": \"invalid-priority\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ac5ca85-cbd2-4d0e-b43d-8d2b966b78a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid Todo Data - Status Code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Invalid Todo Data - Validation error returned', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Validation error handling works correctly');"
                    ],
                    "_lastExecutionId": "32a806a3-e9df-4980-bebf-343e98d6fda7"
                  }
                }
              ]
            },
            {
              "id": "dbb172b0-80b1-4d2c-a56e-e70e11b397e9",
              "name": "❌ Update Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to update a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439012"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"This update should fail\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "612e0a61-c284-4979-b9dd-ea710c36442d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Update Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Update Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Update error handling works correctly');"
                    ],
                    "_lastExecutionId": "f37d4ea7-a1db-4a4a-975e-8046ba0b74a8"
                  }
                }
              ]
            },
            {
              "id": "2619b26f-f3d0-4d8e-84f2-55a666d50369",
              "name": "❌ Delete Non-Existent Todo",
              "request": {
                "description": {
                  "content": "Test error handling when trying to delete a non-existent todo",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "507f1f77bcf86cd799439013"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8d42f93-4665-4bcd-813c-91b0142c31b7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Delete Non-Existent - Status Code is 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Delete Non-Existent - Error message correct', function () {",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson).to.have.property('success', false);",
                      "    pm.expect(responseJson).to.have.property('error');",
                      "});",
                      "",
                      "console.log('✅ Delete error handling works correctly');"
                    ],
                    "_lastExecutionId": "32f100bb-7d59-4286-b21a-89e6b9dd25fc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9a4b60e3-a920-4ca7-91e5-462bd558236e",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86549cc2-c380-4144-8b7e-64683b6738f7",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "ee0ba394-2259-40b9-bd7f-9e08f832ddc8",
          "timestamp": 1758587436950,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
          "name": "📊 Final Statistics Check",
          "request": {
            "description": {
              "content": "Final verification of todo statistics after all operations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c423e25a-cafc-4933-a85d-b8e9a3d559ea",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Final Stats - Status Code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const stats = pm.response.json().data;",
                  "const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                  "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const expectedTotal = initialTotal + createdTodos.length;",
                  "",
                  "pm.test('Final Stats - Todo counts are correct', function () {",
                  "    pm.expect(stats.total).to.equal(expectedTotal);",
                  "});",
                  "",
                  "console.log('📊 Final Statistics:');",
                  "console.log('   Initial todos:', initialTotal);",
                  "console.log('   Created todos:', createdTodos.length);",
                  "console.log('   Deleted todos:', 1);",
                  "console.log('   Expected total:', expectedTotal);",
                  "console.log('   Actual total:', stats.total);",
                  "console.log('   Completed:', stats.completed);",
                  "console.log('   Pending:', stats.pending);",
                  "console.log('✅ Final statistics verification completed');"
                ],
                "_lastExecutionId": "d0d68586-7243-4248-b80a-c4f73191f9f2"
              }
            }
          ]
        },
        "parent": {
          "id": "d063a39a-6491-447d-a9c2-9a5c0d41b1ed",
          "name": "🧹 Cleanup & Final Verification",
          "item": [
            {
              "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
              "name": "📊 Final Statistics Check",
              "request": {
                "description": {
                  "content": "Final verification of todo statistics after all operations",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c423e25a-cafc-4933-a85d-b8e9a3d559ea",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Final Stats - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const stats = pm.response.json().data;",
                      "const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                      "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const expectedTotal = initialTotal + createdTodos.length;",
                      "",
                      "pm.test('Final Stats - Todo counts are correct', function () {",
                      "    pm.expect(stats.total).to.equal(expectedTotal);",
                      "});",
                      "",
                      "console.log('📊 Final Statistics:');",
                      "console.log('   Initial todos:', initialTotal);",
                      "console.log('   Created todos:', createdTodos.length);",
                      "console.log('   Deleted todos:', 1);",
                      "console.log('   Expected total:', expectedTotal);",
                      "console.log('   Actual total:', stats.total);",
                      "console.log('   Completed:', stats.completed);",
                      "console.log('   Pending:', stats.pending);",
                      "console.log('✅ Final statistics verification completed');"
                    ],
                    "_lastExecutionId": "d0d68586-7243-4248-b80a-c4f73191f9f2"
                  }
                }
              ]
            },
            {
              "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
              "name": "🗑️ Cleanup Created Test Todos",
              "request": {
                "description": {
                  "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{currentCleanupTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "463117e1-54d5-42e8-a1e9-872335c6425f",
                    "type": "text/javascript",
                    "exec": [
                      "// Get remaining created todos to clean up",
                      "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "",
                      "if (createdTodos.length === 0) {",
                      "    console.log('⏭️ No todos to clean up');",
                      "    pm.execution.skipRequest();",
                      "} else {",
                      "    // Set the first todo ID for deletion",
                      "    pm.environment.set('currentCleanupTodoId', createdTodos[0]);",
                      "    console.log('🧹 Cleaning up todo:', createdTodos[0]);",
                      "}"
                    ],
                    "_lastExecutionId": "b9906031-c63a-4b26-9631-4f494811da8d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4d4e7544-126e-4a77-afcd-3ca6295bb332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cleanup Todo - Deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Remove the deleted todo from the list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const deletedId = pm.environment.get('currentCleanupTodoId');",
                      "createdTodos = createdTodos.filter(id => id !== deletedId);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('🗑️ Cleaned up todo:', deletedId);",
                      "console.log('📋 Remaining todos to clean:', createdTodos.length);",
                      "",
                      "// If there are more todos to clean up, set up for next iteration",
                      "if (createdTodos.length > 0) {",
                      "    console.log('🔄 More cleanup needed. Run this request again or continue with remaining todos.');",
                      "} else {",
                      "    console.log('✅ All test todos cleaned up successfully!');",
                      "}"
                    ],
                    "_lastExecutionId": "857364f7-b4c5-4189-90e1-6ed8cd5cacd4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98f1f88b-818b-4921-9d39-bdb4fc73865f",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2281aa5b-81cc-424d-8b49-3a1a808334c4",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "SyntaxError",
          "message": "Identifier 'responseTime' has already been declared",
          "checksum": "92eb19195e3825d898c0af45c28209ea",
          "id": "eaa01411-c0a4-400f-b014-aa0326009a4d",
          "timestamp": 1758587436981,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
          "name": "🗑️ Cleanup Created Test Todos",
          "request": {
            "description": {
              "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "todos",
                "{{currentCleanupTodoId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "463117e1-54d5-42e8-a1e9-872335c6425f",
                "type": "text/javascript",
                "exec": [
                  "// Get remaining created todos to clean up",
                  "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "",
                  "if (createdTodos.length === 0) {",
                  "    console.log('⏭️ No todos to clean up');",
                  "    pm.execution.skipRequest();",
                  "} else {",
                  "    // Set the first todo ID for deletion",
                  "    pm.environment.set('currentCleanupTodoId', createdTodos[0]);",
                  "    console.log('🧹 Cleaning up todo:', createdTodos[0]);",
                  "}"
                ],
                "_lastExecutionId": "b9906031-c63a-4b26-9631-4f494811da8d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4d4e7544-126e-4a77-afcd-3ca6295bb332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cleanup Todo - Deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Remove the deleted todo from the list",
                  "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                  "const deletedId = pm.environment.get('currentCleanupTodoId');",
                  "createdTodos = createdTodos.filter(id => id !== deletedId);",
                  "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                  "",
                  "console.log('🗑️ Cleaned up todo:', deletedId);",
                  "console.log('📋 Remaining todos to clean:', createdTodos.length);",
                  "",
                  "// If there are more todos to clean up, set up for next iteration",
                  "if (createdTodos.length > 0) {",
                  "    console.log('🔄 More cleanup needed. Run this request again or continue with remaining todos.');",
                  "} else {",
                  "    console.log('✅ All test todos cleaned up successfully!');",
                  "}"
                ],
                "_lastExecutionId": "857364f7-b4c5-4189-90e1-6ed8cd5cacd4"
              }
            }
          ]
        },
        "parent": {
          "id": "d063a39a-6491-447d-a9c2-9a5c0d41b1ed",
          "name": "🧹 Cleanup & Final Verification",
          "item": [
            {
              "id": "fcaa3bdb-b633-479e-b499-2b5cc987044d",
              "name": "📊 Final Statistics Check",
              "request": {
                "description": {
                  "content": "Final verification of todo statistics after all operations",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c423e25a-cafc-4933-a85d-b8e9a3d559ea",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Final Stats - Status Code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const stats = pm.response.json().data;",
                      "const initialTotal = parseInt(pm.environment.get('initialTotalTodos') || '0');",
                      "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const expectedTotal = initialTotal + createdTodos.length;",
                      "",
                      "pm.test('Final Stats - Todo counts are correct', function () {",
                      "    pm.expect(stats.total).to.equal(expectedTotal);",
                      "});",
                      "",
                      "console.log('📊 Final Statistics:');",
                      "console.log('   Initial todos:', initialTotal);",
                      "console.log('   Created todos:', createdTodos.length);",
                      "console.log('   Deleted todos:', 1);",
                      "console.log('   Expected total:', expectedTotal);",
                      "console.log('   Actual total:', stats.total);",
                      "console.log('   Completed:', stats.completed);",
                      "console.log('   Pending:', stats.pending);",
                      "console.log('✅ Final statistics verification completed');"
                    ],
                    "_lastExecutionId": "d0d68586-7243-4248-b80a-c4f73191f9f2"
                  }
                }
              ]
            },
            {
              "id": "3171c09b-76f7-4b14-bd58-c88f1cfbc3e3",
              "name": "🗑️ Cleanup Created Test Todos",
              "request": {
                "description": {
                  "content": "Clean up test todos created during this test run. Run multiple times if needed to clean all created todos.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "todos",
                    "{{currentCleanupTodoId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "463117e1-54d5-42e8-a1e9-872335c6425f",
                    "type": "text/javascript",
                    "exec": [
                      "// Get remaining created todos to clean up",
                      "const createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "",
                      "if (createdTodos.length === 0) {",
                      "    console.log('⏭️ No todos to clean up');",
                      "    pm.execution.skipRequest();",
                      "} else {",
                      "    // Set the first todo ID for deletion",
                      "    pm.environment.set('currentCleanupTodoId', createdTodos[0]);",
                      "    console.log('🧹 Cleaning up todo:', createdTodos[0]);",
                      "}"
                    ],
                    "_lastExecutionId": "b9906031-c63a-4b26-9631-4f494811da8d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4d4e7544-126e-4a77-afcd-3ca6295bb332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cleanup Todo - Deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Remove the deleted todo from the list",
                      "let createdTodos = JSON.parse(pm.environment.get('createdTodos') || '[]');",
                      "const deletedId = pm.environment.get('currentCleanupTodoId');",
                      "createdTodos = createdTodos.filter(id => id !== deletedId);",
                      "pm.environment.set('createdTodos', JSON.stringify(createdTodos));",
                      "",
                      "console.log('🗑️ Cleaned up todo:', deletedId);",
                      "console.log('📋 Remaining todos to clean:', createdTodos.length);",
                      "",
                      "// If there are more todos to clean up, set up for next iteration",
                      "if (createdTodos.length > 0) {",
                      "    console.log('🔄 More cleanup needed. Run this request again or continue with remaining todos.');",
                      "} else {",
                      "    console.log('✅ All test todos cleaned up successfully!');",
                      "}"
                    ],
                    "_lastExecutionId": "857364f7-b4c5-4189-90e1-6ed8cd5cacd4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "93c60dcb-d05b-4283-9714-7e3e26be4161",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4416c92e-fdbb-44c7-8899-a15bb8221540",
          "scriptId": "60a80c08-d481-4630-8fbb-70f71a2f3dcb"
        }
      }
    ],
    "error": null
  }
}